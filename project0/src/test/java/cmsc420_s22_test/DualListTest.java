package cmsc420_s22_test;

import cmsc420_s22.DualList;
import cmsc420_s22.EmptyListException;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

import java.util.List;

public final class DualListTest {

    @Test
    void test01() {
        var dl = new DualList<String, Integer>();

        dl.insert("A", 5);
        Assertions.assertIterableEquals(List.of("(A, 5)"), dl.listByKey1());
        Assertions.assertIterableEquals(List.of("(A, 5)"), dl.listByKey2());

        dl.insert("Z", 3);
        Assertions.assertIterableEquals(List.of("(A, 5)","(Z, 3)"), dl.listByKey1());
        Assertions.assertIterableEquals(List.of("(Z, 3)","(A, 5)"), dl.listByKey2());

        dl.insert("A", 3);
        Assertions.assertIterableEquals(List.of("(A, 3)","(A, 5)","(Z, 3)"), dl.listByKey1());
        Assertions.assertIterableEquals(List.of("(A, 3)","(Z, 3)","(A, 5)"), dl.listByKey2());
        Assertions.assertEquals(3, dl.size());

        Assertions.assertEquals(3, Assertions.assertDoesNotThrow(dl::extractMinKey1));
        Assertions.assertIterableEquals(List.of("(A, 5)","(Z, 3)"), dl.listByKey1());
        Assertions.assertIterableEquals(List.of("(Z, 3)","(A, 5)"), dl.listByKey2());

        Assertions.assertEquals("Z", Assertions.assertDoesNotThrow(dl::extractMinKey2));
        Assertions.assertIterableEquals(List.of("(Z, 3)"), dl.listByKey1());
        Assertions.assertIterableEquals(List.of("(Z, 3)"), dl.listByKey2());
        Assertions.assertEquals(1, dl.size());

        Assertions.assertEquals(3, Assertions.assertDoesNotThrow(dl::extractMinKey1));
        Assertions.assertIterableEquals(List.of(), dl.listByKey1());
        Assertions.assertIterableEquals(List.of(), dl.listByKey2());
        Assertions.assertEquals(0, dl.size());
        Assertions.assertThrows(EmptyListException.class, dl::extractMinKey1);
    }

    @Test
    void test02() {
        var dl = new DualList<String, Integer>();
        Assertions.assertEquals(0, dl.size());
        Assertions.assertIterableEquals(List.of(), dl.listByKey1());
        Assertions.assertIterableEquals(List.of(), dl.listByKey2());
        dl.insert("BWI", 88);
        Assertions.assertEquals(1, dl.size());
        Assertions.assertIterableEquals(List.of("(BWI, 88)"), dl.listByKey1());
        Assertions.assertIterableEquals(List.of("(BWI, 88)"), dl.listByKey2());
        Assertions.assertEquals(88, Assertions.assertDoesNotThrow(dl::extractMinKey1));
        Assertions.assertEquals(0, dl.size());
        Assertions.assertIterableEquals(List.of(), dl.listByKey1());
        Assertions.assertIterableEquals(List.of(), dl.listByKey2());
        Assertions.assertThrows(EmptyListException.class, dl::extractMinKey2);
        Assertions.assertEquals(0, dl.size());
        Assertions.assertIterableEquals(List.of(), dl.listByKey1());
        Assertions.assertIterableEquals(List.of(), dl.listByKey2());
        dl.insert("LAX", 42);
        dl.insert("IAD", 26);
        dl.insert("DCA", 67);
        dl.insert("JFK", 94);
        dl.insert("BWI", 88);
        Assertions.assertEquals(5, dl.size());
        Assertions.assertIterableEquals(List.of("(BWI, 88)","(DCA, 67)","(IAD, 26)","(JFK, 94)","(LAX, 42)"), dl.listByKey1());
        Assertions.assertIterableEquals(List.of("(IAD, 26)","(LAX, 42)","(DCA, 67)","(BWI, 88)","(JFK, 94)"), dl.listByKey2());
        Assertions.assertEquals(88, Assertions.assertDoesNotThrow(dl::extractMinKey1));
        Assertions.assertEquals(4, dl.size());
        Assertions.assertIterableEquals(List.of("(DCA, 67)","(IAD, 26)","(JFK, 94)","(LAX, 42)"), dl.listByKey1());
        Assertions.assertIterableEquals(List.of("(IAD, 26)","(LAX, 42)","(DCA, 67)","(JFK, 94)"), dl.listByKey2());
        Assertions.assertEquals("IAD", Assertions.assertDoesNotThrow(dl::extractMinKey2));
        Assertions.assertEquals(3, dl.size());
        Assertions.assertIterableEquals(List.of("(DCA, 67)","(JFK, 94)","(LAX, 42)"), dl.listByKey1());
        Assertions.assertIterableEquals(List.of("(LAX, 42)","(DCA, 67)","(JFK, 94)"), dl.listByKey2());
        Assertions.assertEquals(3, dl.size());
    }

    @Test
    void test03() {
        var dl = new DualList<String, Integer>();
        dl.insert("A", 1);
        dl.insert("B", 2);
        dl.insert("C", 3);
        dl.insert("D", 4);
        dl.insert("E", 5);
        dl.insert("A", 2);
        dl.insert("B", 3);
        dl.insert("C", 4);
        dl.insert("D", 5);
        dl.insert("E", 1);
        dl.insert("A", 3);
        dl.insert("B", 4);
        dl.insert("C", 5);
        dl.insert("D", 1);
        dl.insert("E", 2);
        Assertions.assertEquals(15, dl.size());
        Assertions.assertIterableEquals(List.of("(A, 1)","(A, 2)","(A, 3)","(B, 2)","(B, 3)","(B, 4)","(C, 3)","(C, 4)","(C, 5)","(D, 1)","(D, 4)","(D, 5)","(E, 1)","(E, 2)","(E, 5)"), dl.listByKey1());
        Assertions.assertIterableEquals(List.of("(A, 1)","(D, 1)","(E, 1)","(A, 2)","(B, 2)","(E, 2)","(A, 3)","(B, 3)","(C, 3)","(B, 4)","(C, 4)","(D, 4)","(C, 5)","(D, 5)","(E, 5)"), dl.listByKey2());
        Assertions.assertEquals(1, Assertions.assertDoesNotThrow(dl::extractMinKey1));
        Assertions.assertEquals("D", Assertions.assertDoesNotThrow(dl::extractMinKey2));
        Assertions.assertEquals(2, Assertions.assertDoesNotThrow(dl::extractMinKey1));
        Assertions.assertEquals("E", Assertions.assertDoesNotThrow(dl::extractMinKey2));
        Assertions.assertEquals(3, Assertions.assertDoesNotThrow(dl::extractMinKey1));
        Assertions.assertEquals("B", Assertions.assertDoesNotThrow(dl::extractMinKey2));
        Assertions.assertEquals(3, Assertions.assertDoesNotThrow(dl::extractMinKey1));
        Assertions.assertEquals("E", Assertions.assertDoesNotThrow(dl::extractMinKey2));
        Assertions.assertEquals(7, dl.size());
        Assertions.assertIterableEquals(List.of("(B, 4)","(C, 3)","(C, 4)","(C, 5)","(D, 4)","(D, 5)","(E, 5)"), dl.listByKey1());
        Assertions.assertIterableEquals(List.of("(C, 3)","(B, 4)","(C, 4)","(D, 4)","(C, 5)","(D, 5)","(E, 5)"), dl.listByKey2());
        Assertions.assertEquals(4, Assertions.assertDoesNotThrow(dl::extractMinKey1));
        Assertions.assertEquals("C", Assertions.assertDoesNotThrow(dl::extractMinKey2));
        Assertions.assertEquals(4, Assertions.assertDoesNotThrow(dl::extractMinKey1));
        Assertions.assertEquals("D", Assertions.assertDoesNotThrow(dl::extractMinKey2));
        Assertions.assertEquals(5, Assertions.assertDoesNotThrow(dl::extractMinKey1));
        Assertions.assertEquals("D", Assertions.assertDoesNotThrow(dl::extractMinKey2));
        Assertions.assertEquals(5, Assertions.assertDoesNotThrow(dl::extractMinKey1));
        Assertions.assertThrows(EmptyListException.class, dl::extractMinKey2);
        Assertions.assertEquals(0, dl.size());
        Assertions.assertIterableEquals(List.of(), dl.listByKey1());
        Assertions.assertIterableEquals(List.of(), dl.listByKey2());
        dl.insert("A", 4);
        dl.insert("B", 5);
        dl.insert("C", 1);
        dl.insert("D", 2);
        dl.insert("E", 3);
        dl.insert("A", 5);
        dl.insert("B", 1);
        dl.insert("C", 2);
        dl.insert("D", 3);
        dl.insert("E", 4);
        Assertions.assertEquals(4, Assertions.assertDoesNotThrow(dl::extractMinKey1));
        Assertions.assertEquals("B", Assertions.assertDoesNotThrow(dl::extractMinKey2));
        Assertions.assertEquals(5, Assertions.assertDoesNotThrow(dl::extractMinKey1));
        Assertions.assertEquals("C", Assertions.assertDoesNotThrow(dl::extractMinKey2));
        Assertions.assertEquals(5, Assertions.assertDoesNotThrow(dl::extractMinKey1));
        Assertions.assertEquals("C", Assertions.assertDoesNotThrow(dl::extractMinKey2));
        Assertions.assertEquals(2, Assertions.assertDoesNotThrow(dl::extractMinKey1));
        Assertions.assertEquals("D", Assertions.assertDoesNotThrow(dl::extractMinKey2));
        Assertions.assertEquals(2, dl.size());
        Assertions.assertIterableEquals(List.of("(E, 3)","(E, 4)"), dl.listByKey1());
        Assertions.assertIterableEquals(List.of("(E, 3)","(E, 4)"), dl.listByKey2());

    }

    @Test
    void test04() {
        var dl = new DualList<String, Integer>();
        Assertions.assertEquals(0, dl.size());
        dl.insert("ACK", 339);
        dl.insert("ACY", 312);
        dl.insert("AEX", 154);
        dl.insert("AKR", 344);
        dl.insert("ALB", 362);
        dl.insert("AMA", 220);
        dl.insert("ART", 381);
        dl.insert("ATL", 189);
        dl.insert("AUG", 412);
        dl.insert("AUS", 126);
        dl.insert("BCT", 49);
        dl.insert("BFI", 477);
        dl.insert("BFM", 128);
        dl.insert("BGR", 409);
        dl.insert("BHM", 193);
        dl.insert("BLI", 492);
        dl.insert("BNA", 257);
        dl.insert("BOI", 396);
        dl.insert("BOS", 374);
        dl.insert("BRO", 31);
        dl.insert("BTR", 119);
        dl.insert("BUF", 370);
        dl.insert("BUR", 217);
        dl.insert("BWI", 302);
        dl.insert("CBM", 196);
        dl.insert("CHA", 233);
        dl.insert("CHS", 160);
        dl.insert("CIC", 305);
        dl.insert("CLE", 343);
        dl.insert("CLL", 136);
        dl.insert("CLT", 228);
        dl.insert("CMH", 312);
        dl.insert("CNM", 175);
        dl.insert("CNW", 154);
        dl.insert("COS", 296);
        dl.insert("CPR", 370);
        dl.insert("CRP", 61);
        dl.insert("CVG", 305);
        dl.insert("CYS", 341);
        dl.insert("DAL", 164);
        dl.insert("DAY", 302);
        dl.insert("DCA", 296);
        dl.insert("DEN", 313);
        dl.insert("DET", 364);
        dl.insert("DFW", 168);
        dl.insert("DLF", 112);
        dl.insert("DLH", 454);
        dl.insert("DMA", 170);
        dl.insert("DPA", 352);
        dl.insert("DRT", 104);
        Assertions.assertEquals(50, dl.size());
        Assertions.assertIterableEquals(List.of("(ACK, 339)","(ACY, 312)","(AEX, 154)","(AKR, 344)","(ALB, 362)","(AMA, 220)","(ART, 381)","(ATL, 189)","(AUG, 412)","(AUS, 126)","(BCT, 49)","(BFI, 477)","(BFM, 128)","(BGR, 409)","(BHM, 193)","(BLI, 492)","(BNA, 257)","(BOI, 396)","(BOS, 374)","(BRO, 31)","(BTR, 119)","(BUF, 370)","(BUR, 217)","(BWI, 302)","(CBM, 196)","(CHA, 233)","(CHS, 160)","(CIC, 305)","(CLE, 343)","(CLL, 136)","(CLT, 228)","(CMH, 312)","(CNM, 175)","(CNW, 154)","(COS, 296)","(CPR, 370)","(CRP, 61)","(CVG, 305)","(CYS, 341)","(DAL, 164)","(DAY, 302)","(DCA, 296)","(DEN, 313)","(DET, 364)","(DFW, 168)","(DLF, 112)","(DLH, 454)","(DMA, 170)","(DPA, 352)","(DRT, 104)"), dl.listByKey1());
        Assertions.assertIterableEquals(List.of("(BRO, 31)","(BCT, 49)","(CRP, 61)","(DRT, 104)","(DLF, 112)","(BTR, 119)","(AUS, 126)","(BFM, 128)","(CLL, 136)","(AEX, 154)","(CNW, 154)","(CHS, 160)","(DAL, 164)","(DFW, 168)","(DMA, 170)","(CNM, 175)","(ATL, 189)","(BHM, 193)","(CBM, 196)","(BUR, 217)","(AMA, 220)","(CLT, 228)","(CHA, 233)","(BNA, 257)","(COS, 296)","(DCA, 296)","(BWI, 302)","(DAY, 302)","(CIC, 305)","(CVG, 305)","(ACY, 312)","(CMH, 312)","(DEN, 313)","(ACK, 339)","(CYS, 341)","(CLE, 343)","(AKR, 344)","(DPA, 352)","(ALB, 362)","(DET, 364)","(BUF, 370)","(CPR, 370)","(BOS, 374)","(ART, 381)","(BOI, 396)","(BGR, 409)","(AUG, 412)","(DLH, 454)","(BFI, 477)","(BLI, 492)"), dl.listByKey2());
        Assertions.assertEquals(339, Assertions.assertDoesNotThrow(dl::extractMinKey1));
        dl.insert("DSM", 357);
        dl.insert("DTW", 363);
        dl.insert("DUG", 147);
        dl.insert("DYS", 174);
        dl.insert("EDW", 206);
        dl.insert("EFD", 115);
        dl.insert("ELP", 150);
        dl.insert("EWR", 325);
        dl.insert("EYW", 4);
        dl.insert("FAT", 239);
        dl.insert("FFO", 304);
        dl.insert("FLL", 46);
        dl.insert("FMY", 56);
        dl.insert("FOE", 297);
        dl.insert("FTW", 163);
        dl.insert("FXE", 50);
        dl.insert("FYV", 252);
        dl.insert("GEG", 465);
        dl.insert("GLS", 107);
        dl.insert("GRB", 404);
        dl.insert("GRR", 377);
        dl.insert("GSB", 221);
        dl.insert("GTF", 465);
        dl.insert("GVT", 192);
        dl.insert("GVW", 280);
        dl.insert("GWO", 196);
        dl.insert("HFD", 353);
        dl.insert("HMN", 164);
        dl.insert("HOU", 103);
        dl.insert("HPN", 353);
        dl.insert("HRO", 254);
        dl.insert("HUF", 315);
        dl.insert("HWO", 53);
        dl.insert("IAB", 274);
        dl.insert("IAD", 292);
        dl.insert("IAG", 394);
        dl.insert("IAH", 100);
        dl.insert("IKK", 341);
        dl.insert("ABQ", 233);
        dl.insert("ILM", 213);
        dl.insert("IND", 313);
        dl.insert("INT", 249);
        dl.insert("ISP", 322);
        dl.insert("JAN", 172);
        dl.insert("JAX", 137);
        dl.insert("JBR", 232);
        dl.insert("JFK", 337);
        dl.insert("LAS", 251);
        dl.insert("LAX", 181);
        dl.insert("LBB", 185);
        Assertions.assertEquals(99, dl.size());
        Assertions.assertIterableEquals(List.of("(ABQ, 233)","(ACY, 312)","(AEX, 154)","(AKR, 344)","(ALB, 362)","(AMA, 220)","(ART, 381)","(ATL, 189)","(AUG, 412)","(AUS, 126)","(BCT, 49)","(BFI, 477)","(BFM, 128)","(BGR, 409)","(BHM, 193)","(BLI, 492)","(BNA, 257)","(BOI, 396)","(BOS, 374)","(BRO, 31)","(BTR, 119)","(BUF, 370)","(BUR, 217)","(BWI, 302)","(CBM, 196)","(CHA, 233)","(CHS, 160)","(CIC, 305)","(CLE, 343)","(CLL, 136)","(CLT, 228)","(CMH, 312)","(CNM, 175)","(CNW, 154)","(COS, 296)","(CPR, 370)","(CRP, 61)","(CVG, 305)","(CYS, 341)","(DAL, 164)","(DAY, 302)","(DCA, 296)","(DEN, 313)","(DET, 364)","(DFW, 168)","(DLF, 112)","(DLH, 454)","(DMA, 170)","(DPA, 352)","(DRT, 104)","(DSM, 357)","(DTW, 363)","(DUG, 147)","(DYS, 174)","(EDW, 206)","(EFD, 115)","(ELP, 150)","(EWR, 325)","(EYW, 4)","(FAT, 239)","(FFO, 304)","(FLL, 46)","(FMY, 56)","(FOE, 297)","(FTW, 163)","(FXE, 50)","(FYV, 252)","(GEG, 465)","(GLS, 107)","(GRB, 404)","(GRR, 377)","(GSB, 221)","(GTF, 465)","(GVT, 192)","(GVW, 280)","(GWO, 196)","(HFD, 353)","(HMN, 164)","(HOU, 103)","(HPN, 353)","(HRO, 254)","(HUF, 315)","(HWO, 53)","(IAB, 274)","(IAD, 292)","(IAG, 394)","(IAH, 100)","(IKK, 341)","(ILM, 213)","(IND, 313)","(INT, 249)","(ISP, 322)","(JAN, 172)","(JAX, 137)","(JBR, 232)","(JFK, 337)","(LAS, 251)","(LAX, 181)","(LBB, 185)"), dl.listByKey1());
        Assertions.assertIterableEquals(List.of("(EYW, 4)","(BRO, 31)","(FLL, 46)","(BCT, 49)","(FXE, 50)","(HWO, 53)","(FMY, 56)","(CRP, 61)","(IAH, 100)","(HOU, 103)","(DRT, 104)","(GLS, 107)","(DLF, 112)","(EFD, 115)","(BTR, 119)","(AUS, 126)","(BFM, 128)","(CLL, 136)","(JAX, 137)","(DUG, 147)","(ELP, 150)","(AEX, 154)","(CNW, 154)","(CHS, 160)","(FTW, 163)","(DAL, 164)","(HMN, 164)","(DFW, 168)","(DMA, 170)","(JAN, 172)","(DYS, 174)","(CNM, 175)","(LAX, 181)","(LBB, 185)","(ATL, 189)","(GVT, 192)","(BHM, 193)","(CBM, 196)","(GWO, 196)","(EDW, 206)","(ILM, 213)","(BUR, 217)","(AMA, 220)","(GSB, 221)","(CLT, 228)","(JBR, 232)","(ABQ, 233)","(CHA, 233)","(FAT, 239)","(INT, 249)","(LAS, 251)","(FYV, 252)","(HRO, 254)","(BNA, 257)","(IAB, 274)","(GVW, 280)","(IAD, 292)","(COS, 296)","(DCA, 296)","(FOE, 297)","(BWI, 302)","(DAY, 302)","(FFO, 304)","(CIC, 305)","(CVG, 305)","(ACY, 312)","(CMH, 312)","(DEN, 313)","(IND, 313)","(HUF, 315)","(ISP, 322)","(EWR, 325)","(JFK, 337)","(CYS, 341)","(IKK, 341)","(CLE, 343)","(AKR, 344)","(DPA, 352)","(HFD, 353)","(HPN, 353)","(DSM, 357)","(ALB, 362)","(DTW, 363)","(DET, 364)","(BUF, 370)","(CPR, 370)","(BOS, 374)","(GRR, 377)","(ART, 381)","(IAG, 394)","(BOI, 396)","(GRB, 404)","(BGR, 409)","(AUG, 412)","(DLH, 454)","(GEG, 465)","(GTF, 465)","(BFI, 477)","(BLI, 492)"), dl.listByKey2());
        Assertions.assertEquals(233, Assertions.assertDoesNotThrow(dl::extractMinKey1));
        Assertions.assertEquals("EYW", Assertions.assertDoesNotThrow(dl::extractMinKey2));
        Assertions.assertIterableEquals(List.of("(ACY, 312)","(AEX, 154)","(AKR, 344)","(ALB, 362)","(AMA, 220)","(ART, 381)","(ATL, 189)","(AUG, 412)","(AUS, 126)","(BCT, 49)","(BFI, 477)","(BFM, 128)","(BGR, 409)","(BHM, 193)","(BLI, 492)","(BNA, 257)","(BOI, 396)","(BOS, 374)","(BRO, 31)","(BTR, 119)","(BUF, 370)","(BUR, 217)","(BWI, 302)","(CBM, 196)","(CHA, 233)","(CHS, 160)","(CIC, 305)","(CLE, 343)","(CLL, 136)","(CLT, 228)","(CMH, 312)","(CNM, 175)","(CNW, 154)","(COS, 296)","(CPR, 370)","(CRP, 61)","(CVG, 305)","(CYS, 341)","(DAL, 164)","(DAY, 302)","(DCA, 296)","(DEN, 313)","(DET, 364)","(DFW, 168)","(DLF, 112)","(DLH, 454)","(DMA, 170)","(DPA, 352)","(DRT, 104)","(DSM, 357)","(DTW, 363)","(DUG, 147)","(DYS, 174)","(EDW, 206)","(EFD, 115)","(ELP, 150)","(EWR, 325)","(FAT, 239)","(FFO, 304)","(FLL, 46)","(FMY, 56)","(FOE, 297)","(FTW, 163)","(FXE, 50)","(FYV, 252)","(GEG, 465)","(GLS, 107)","(GRB, 404)","(GRR, 377)","(GSB, 221)","(GTF, 465)","(GVT, 192)","(GVW, 280)","(GWO, 196)","(HFD, 353)","(HMN, 164)","(HOU, 103)","(HPN, 353)","(HRO, 254)","(HUF, 315)","(HWO, 53)","(IAB, 274)","(IAD, 292)","(IAG, 394)","(IAH, 100)","(IKK, 341)","(ILM, 213)","(IND, 313)","(INT, 249)","(ISP, 322)","(JAN, 172)","(JAX, 137)","(JBR, 232)","(JFK, 337)","(LAS, 251)","(LAX, 181)","(LBB, 185)"), dl.listByKey1());
        Assertions.assertIterableEquals(List.of("(BRO, 31)","(FLL, 46)","(BCT, 49)","(FXE, 50)","(HWO, 53)","(FMY, 56)","(CRP, 61)","(IAH, 100)","(HOU, 103)","(DRT, 104)","(GLS, 107)","(DLF, 112)","(EFD, 115)","(BTR, 119)","(AUS, 126)","(BFM, 128)","(CLL, 136)","(JAX, 137)","(DUG, 147)","(ELP, 150)","(AEX, 154)","(CNW, 154)","(CHS, 160)","(FTW, 163)","(DAL, 164)","(HMN, 164)","(DFW, 168)","(DMA, 170)","(JAN, 172)","(DYS, 174)","(CNM, 175)","(LAX, 181)","(LBB, 185)","(ATL, 189)","(GVT, 192)","(BHM, 193)","(CBM, 196)","(GWO, 196)","(EDW, 206)","(ILM, 213)","(BUR, 217)","(AMA, 220)","(GSB, 221)","(CLT, 228)","(JBR, 232)","(CHA, 233)","(FAT, 239)","(INT, 249)","(LAS, 251)","(FYV, 252)","(HRO, 254)","(BNA, 257)","(IAB, 274)","(GVW, 280)","(IAD, 292)","(COS, 296)","(DCA, 296)","(FOE, 297)","(BWI, 302)","(DAY, 302)","(FFO, 304)","(CIC, 305)","(CVG, 305)","(ACY, 312)","(CMH, 312)","(DEN, 313)","(IND, 313)","(HUF, 315)","(ISP, 322)","(EWR, 325)","(JFK, 337)","(CYS, 341)","(IKK, 341)","(CLE, 343)","(AKR, 344)","(DPA, 352)","(HFD, 353)","(HPN, 353)","(DSM, 357)","(ALB, 362)","(DTW, 363)","(DET, 364)","(BUF, 370)","(CPR, 370)","(BOS, 374)","(GRR, 377)","(ART, 381)","(IAG, 394)","(BOI, 396)","(GRB, 404)","(BGR, 409)","(AUG, 412)","(DLH, 454)","(GEG, 465)","(GTF, 465)","(BFI, 477)","(BLI, 492)"), dl.listByKey2());
        Assertions.assertEquals(312, Assertions.assertDoesNotThrow(dl::extractMinKey1));
        Assertions.assertEquals("BRO", Assertions.assertDoesNotThrow(dl::extractMinKey2));
        Assertions.assertEquals(154, Assertions.assertDoesNotThrow(dl::extractMinKey1));
        Assertions.assertEquals("FLL", Assertions.assertDoesNotThrow(dl::extractMinKey2));
        Assertions.assertEquals(344, Assertions.assertDoesNotThrow(dl::extractMinKey1));
        Assertions.assertEquals("BCT", Assertions.assertDoesNotThrow(dl::extractMinKey2));
        Assertions.assertEquals(362, Assertions.assertDoesNotThrow(dl::extractMinKey1));
        Assertions.assertEquals("FXE", Assertions.assertDoesNotThrow(dl::extractMinKey2));
        Assertions.assertIterableEquals(List.of("(AMA, 220)","(ART, 381)","(ATL, 189)","(AUG, 412)","(AUS, 126)","(BFI, 477)","(BFM, 128)","(BGR, 409)","(BHM, 193)","(BLI, 492)","(BNA, 257)","(BOI, 396)","(BOS, 374)","(BTR, 119)","(BUF, 370)","(BUR, 217)","(BWI, 302)","(CBM, 196)","(CHA, 233)","(CHS, 160)","(CIC, 305)","(CLE, 343)","(CLL, 136)","(CLT, 228)","(CMH, 312)","(CNM, 175)","(CNW, 154)","(COS, 296)","(CPR, 370)","(CRP, 61)","(CVG, 305)","(CYS, 341)","(DAL, 164)","(DAY, 302)","(DCA, 296)","(DEN, 313)","(DET, 364)","(DFW, 168)","(DLF, 112)","(DLH, 454)","(DMA, 170)","(DPA, 352)","(DRT, 104)","(DSM, 357)","(DTW, 363)","(DUG, 147)","(DYS, 174)","(EDW, 206)","(EFD, 115)","(ELP, 150)","(EWR, 325)","(FAT, 239)","(FFO, 304)","(FMY, 56)","(FOE, 297)","(FTW, 163)","(FYV, 252)","(GEG, 465)","(GLS, 107)","(GRB, 404)","(GRR, 377)","(GSB, 221)","(GTF, 465)","(GVT, 192)","(GVW, 280)","(GWO, 196)","(HFD, 353)","(HMN, 164)","(HOU, 103)","(HPN, 353)","(HRO, 254)","(HUF, 315)","(HWO, 53)","(IAB, 274)","(IAD, 292)","(IAG, 394)","(IAH, 100)","(IKK, 341)","(ILM, 213)","(IND, 313)","(INT, 249)","(ISP, 322)","(JAN, 172)","(JAX, 137)","(JBR, 232)","(JFK, 337)","(LAS, 251)","(LAX, 181)","(LBB, 185)"), dl.listByKey1());
        Assertions.assertIterableEquals(List.of("(HWO, 53)","(FMY, 56)","(CRP, 61)","(IAH, 100)","(HOU, 103)","(DRT, 104)","(GLS, 107)","(DLF, 112)","(EFD, 115)","(BTR, 119)","(AUS, 126)","(BFM, 128)","(CLL, 136)","(JAX, 137)","(DUG, 147)","(ELP, 150)","(CNW, 154)","(CHS, 160)","(FTW, 163)","(DAL, 164)","(HMN, 164)","(DFW, 168)","(DMA, 170)","(JAN, 172)","(DYS, 174)","(CNM, 175)","(LAX, 181)","(LBB, 185)","(ATL, 189)","(GVT, 192)","(BHM, 193)","(CBM, 196)","(GWO, 196)","(EDW, 206)","(ILM, 213)","(BUR, 217)","(AMA, 220)","(GSB, 221)","(CLT, 228)","(JBR, 232)","(CHA, 233)","(FAT, 239)","(INT, 249)","(LAS, 251)","(FYV, 252)","(HRO, 254)","(BNA, 257)","(IAB, 274)","(GVW, 280)","(IAD, 292)","(COS, 296)","(DCA, 296)","(FOE, 297)","(BWI, 302)","(DAY, 302)","(FFO, 304)","(CIC, 305)","(CVG, 305)","(CMH, 312)","(DEN, 313)","(IND, 313)","(HUF, 315)","(ISP, 322)","(EWR, 325)","(JFK, 337)","(CYS, 341)","(IKK, 341)","(CLE, 343)","(DPA, 352)","(HFD, 353)","(HPN, 353)","(DSM, 357)","(DTW, 363)","(DET, 364)","(BUF, 370)","(CPR, 370)","(BOS, 374)","(GRR, 377)","(ART, 381)","(IAG, 394)","(BOI, 396)","(GRB, 404)","(BGR, 409)","(AUG, 412)","(DLH, 454)","(GEG, 465)","(GTF, 465)","(BFI, 477)","(BLI, 492)"), dl.listByKey2());
        Assertions.assertEquals(220, Assertions.assertDoesNotThrow(dl::extractMinKey1));
        Assertions.assertEquals("HWO", Assertions.assertDoesNotThrow(dl::extractMinKey2));
        Assertions.assertEquals(381, Assertions.assertDoesNotThrow(dl::extractMinKey1));
        Assertions.assertEquals("FMY", Assertions.assertDoesNotThrow(dl::extractMinKey2));
        Assertions.assertEquals(189, Assertions.assertDoesNotThrow(dl::extractMinKey1));
        Assertions.assertEquals("CRP", Assertions.assertDoesNotThrow(dl::extractMinKey2));
        Assertions.assertEquals(412, Assertions.assertDoesNotThrow(dl::extractMinKey1));
        Assertions.assertEquals("IAH", Assertions.assertDoesNotThrow(dl::extractMinKey2));
        Assertions.assertEquals(126, Assertions.assertDoesNotThrow(dl::extractMinKey1));
        Assertions.assertEquals("HOU", Assertions.assertDoesNotThrow(dl::extractMinKey2));
        Assertions.assertEquals(477, Assertions.assertDoesNotThrow(dl::extractMinKey1));
        Assertions.assertEquals("DRT", Assertions.assertDoesNotThrow(dl::extractMinKey2));
        Assertions.assertEquals(128, Assertions.assertDoesNotThrow(dl::extractMinKey1));
        Assertions.assertEquals("GLS", Assertions.assertDoesNotThrow(dl::extractMinKey2));
        Assertions.assertEquals(409, Assertions.assertDoesNotThrow(dl::extractMinKey1));
        Assertions.assertEquals("DLF", Assertions.assertDoesNotThrow(dl::extractMinKey2));
        Assertions.assertEquals(193, Assertions.assertDoesNotThrow(dl::extractMinKey1));
        Assertions.assertEquals("EFD", Assertions.assertDoesNotThrow(dl::extractMinKey2));
        Assertions.assertEquals("BTR", Assertions.assertDoesNotThrow(dl::extractMinKey2));
        Assertions.assertEquals(492, Assertions.assertDoesNotThrow(dl::extractMinKey1));
        Assertions.assertEquals(257, Assertions.assertDoesNotThrow(dl::extractMinKey1));
        Assertions.assertEquals(396, Assertions.assertDoesNotThrow(dl::extractMinKey1));
        Assertions.assertEquals(374, Assertions.assertDoesNotThrow(dl::extractMinKey1));
        Assertions.assertEquals(370, Assertions.assertDoesNotThrow(dl::extractMinKey1));
        Assertions.assertEquals(217, Assertions.assertDoesNotThrow(dl::extractMinKey1));
        Assertions.assertEquals(302, Assertions.assertDoesNotThrow(dl::extractMinKey1));
        Assertions.assertEquals(196, Assertions.assertDoesNotThrow(dl::extractMinKey1));
        Assertions.assertEquals(233, Assertions.assertDoesNotThrow(dl::extractMinKey1));
        Assertions.assertEquals(160, Assertions.assertDoesNotThrow(dl::extractMinKey1));
        Assertions.assertEquals("CLL", Assertions.assertDoesNotThrow(dl::extractMinKey2));
        Assertions.assertEquals("JAX", Assertions.assertDoesNotThrow(dl::extractMinKey2));
        Assertions.assertEquals("DUG", Assertions.assertDoesNotThrow(dl::extractMinKey2));
        Assertions.assertEquals("ELP", Assertions.assertDoesNotThrow(dl::extractMinKey2));
        Assertions.assertEquals("CNW", Assertions.assertDoesNotThrow(dl::extractMinKey2));
        Assertions.assertEquals("FTW", Assertions.assertDoesNotThrow(dl::extractMinKey2));
        Assertions.assertEquals("DAL", Assertions.assertDoesNotThrow(dl::extractMinKey2));
        Assertions.assertEquals("HMN", Assertions.assertDoesNotThrow(dl::extractMinKey2));
        Assertions.assertEquals("DFW", Assertions.assertDoesNotThrow(dl::extractMinKey2));
        Assertions.assertEquals("DMA", Assertions.assertDoesNotThrow(dl::extractMinKey2));
        Assertions.assertEquals(305, Assertions.assertDoesNotThrow(dl::extractMinKey1));
        Assertions.assertEquals(343, Assertions.assertDoesNotThrow(dl::extractMinKey1));
        Assertions.assertEquals(228, Assertions.assertDoesNotThrow(dl::extractMinKey1));
        Assertions.assertEquals(312, Assertions.assertDoesNotThrow(dl::extractMinKey1));
        Assertions.assertEquals(175, Assertions.assertDoesNotThrow(dl::extractMinKey1));
        Assertions.assertEquals(296, Assertions.assertDoesNotThrow(dl::extractMinKey1));
        Assertions.assertEquals(370, Assertions.assertDoesNotThrow(dl::extractMinKey1));
        Assertions.assertEquals(305, Assertions.assertDoesNotThrow(dl::extractMinKey1));
        Assertions.assertEquals(341, Assertions.assertDoesNotThrow(dl::extractMinKey1));
        Assertions.assertEquals(302, Assertions.assertDoesNotThrow(dl::extractMinKey1));
        Assertions.assertEquals("JAN", Assertions.assertDoesNotThrow(dl::extractMinKey2));
        Assertions.assertEquals("DYS", Assertions.assertDoesNotThrow(dl::extractMinKey2));
        Assertions.assertEquals("LAX", Assertions.assertDoesNotThrow(dl::extractMinKey2));
        Assertions.assertEquals("LBB", Assertions.assertDoesNotThrow(dl::extractMinKey2));
        Assertions.assertEquals("GVT", Assertions.assertDoesNotThrow(dl::extractMinKey2));
        Assertions.assertEquals("GWO", Assertions.assertDoesNotThrow(dl::extractMinKey2));
        Assertions.assertEquals("EDW", Assertions.assertDoesNotThrow(dl::extractMinKey2));
        Assertions.assertEquals("ILM", Assertions.assertDoesNotThrow(dl::extractMinKey2));
        Assertions.assertEquals("GSB", Assertions.assertDoesNotThrow(dl::extractMinKey2));
        Assertions.assertEquals("JBR", Assertions.assertDoesNotThrow(dl::extractMinKey2));
        Assertions.assertEquals(296, Assertions.assertDoesNotThrow(dl::extractMinKey1));
        Assertions.assertEquals(313, Assertions.assertDoesNotThrow(dl::extractMinKey1));
        Assertions.assertEquals(364, Assertions.assertDoesNotThrow(dl::extractMinKey1));
        Assertions.assertEquals(454, Assertions.assertDoesNotThrow(dl::extractMinKey1));
        Assertions.assertEquals(352, Assertions.assertDoesNotThrow(dl::extractMinKey1));
        Assertions.assertEquals(357, Assertions.assertDoesNotThrow(dl::extractMinKey1));
        Assertions.assertEquals(363, Assertions.assertDoesNotThrow(dl::extractMinKey1));
        Assertions.assertEquals(325, Assertions.assertDoesNotThrow(dl::extractMinKey1));
        Assertions.assertEquals(239, Assertions.assertDoesNotThrow(dl::extractMinKey1));
        Assertions.assertEquals(304, Assertions.assertDoesNotThrow(dl::extractMinKey1));
        Assertions.assertEquals("INT", Assertions.assertDoesNotThrow(dl::extractMinKey2));
        Assertions.assertEquals("LAS", Assertions.assertDoesNotThrow(dl::extractMinKey2));
        Assertions.assertEquals("FYV", Assertions.assertDoesNotThrow(dl::extractMinKey2));
        Assertions.assertEquals("HRO", Assertions.assertDoesNotThrow(dl::extractMinKey2));
        Assertions.assertEquals("IAB", Assertions.assertDoesNotThrow(dl::extractMinKey2));
        Assertions.assertEquals("GVW", Assertions.assertDoesNotThrow(dl::extractMinKey2));
        Assertions.assertEquals("IAD", Assertions.assertDoesNotThrow(dl::extractMinKey2));
        Assertions.assertEquals("FOE", Assertions.assertDoesNotThrow(dl::extractMinKey2));
        Assertions.assertEquals("IND", Assertions.assertDoesNotThrow(dl::extractMinKey2));
        Assertions.assertEquals("HUF", Assertions.assertDoesNotThrow(dl::extractMinKey2));
        Assertions.assertEquals(465, Assertions.assertDoesNotThrow(dl::extractMinKey1));
        Assertions.assertEquals("ISP", Assertions.assertDoesNotThrow(dl::extractMinKey2));
        Assertions.assertEquals(404, Assertions.assertDoesNotThrow(dl::extractMinKey1));
        Assertions.assertEquals("JFK", Assertions.assertDoesNotThrow(dl::extractMinKey2));
        Assertions.assertEquals(377, Assertions.assertDoesNotThrow(dl::extractMinKey1));
        Assertions.assertEquals("IKK", Assertions.assertDoesNotThrow(dl::extractMinKey2));
        Assertions.assertEquals(465, Assertions.assertDoesNotThrow(dl::extractMinKey1));
        Assertions.assertEquals("HFD", Assertions.assertDoesNotThrow(dl::extractMinKey2));
        Assertions.assertEquals(353, Assertions.assertDoesNotThrow(dl::extractMinKey1));
        Assertions.assertEquals("IAG", Assertions.assertDoesNotThrow(dl::extractMinKey2));
        Assertions.assertThrows(EmptyListException.class, dl::extractMinKey1);
        Assertions.assertThrows(EmptyListException.class, dl::extractMinKey2);
        Assertions.assertIterableEquals(List.of(), dl.listByKey1());
        Assertions.assertIterableEquals(List.of(), dl.listByKey2());
        Assertions.assertThrows(EmptyListException.class, dl::extractMinKey1);
        Assertions.assertEquals(0, dl.size());

    }

}
