package cmsc420_s22_test;

import cmsc420_s22.EmptyHeapException;
import cmsc420_s22.QuakeHeap;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

import java.util.HashMap;
import java.util.List;

public class TestQuakeHeap8 {

    @Test
    void test08() {
        // This test involves 128 entries and multiple decrease-keys and extract-mins and some error checking
        var heap = new QuakeHeap<Integer, String>(8);
        var locators = new HashMap<String, QuakeHeap<Integer, String>.Locator>();
        // The following should generate an error
        Assertions.assertThrows(IllegalArgumentException.class, () -> heap.setQuakeRatio(0.450000));
        locators.put("MTC", heap.insert(479359, "MTC"));
        locators.put("MUI", heap.insert(542333, "MUI"));
        locators.put("MUO", heap.insert(147379, "MUO"));
        locators.put("MWH", heap.insert(111477, "MWH"));
        locators.put("MWL", heap.insert(316161, "MWL"));
        locators.put("MXF", heap.insert(434168, "MXF"));
        locators.put("MYR", heap.insert(519184, "MYR"));
        locators.put("NBC", heap.insert(493167, "NBC"));
        locators.put("NBG", heap.insert(394106, "NBG"));
        locators.put("NCA", heap.insert(532218, "NCA"));
        locators.put("NEL", heap.insert(554335, "NEL"));
        locators.put("NFL", heap.insert(122299, "NFL"));
        locators.put("NGU", heap.insert(542250, "NGU"));
        locators.put("NHK", heap.insert(537290, "NHK"));
        locators.put("NID", heap.insert(129237, "NID"));
        locators.put("NIP", heap.insert(486135, "NIP"));
        locators.put("NJK", heap.insert(144167, "NJK"));
        locators.put("NKT", heap.insert(542206, "NKT"));
        locators.put("NKX", heap.insert(131170, "NKX"));
        locators.put("NLC", heap.insert(105256, "NLC"));
        locators.put("NMM", heap.insert(413168, "NMM"));
        locators.put("NOW", heap.insert(67488, "NOW"));
        locators.put("NPA", heap.insert(429127, "NPA"));
        locators.put("NQA", heap.insert(410231, "NQA"));
        locators.put("NQI", heap.insert(327637, "NQI"));
        locators.put("NQX", heap.insert(488147, "NQX"));
        locators.put("NSE", heap.insert(428125, "NSE"));
        locators.put("NTD", heap.insert(112201, "NTD"));
        locators.put("NTK", heap.insert(126189, "NTK"));
        locators.put("NTU", heap.insert(533255, "NTU"));
        locators.put("NUQ", heap.insert(81275, "NUQ"));
        locators.put("NUW", heap.insert(82483, "NUW"));
        locators.put("NXP", heap.insert(140210, "NXP"));
        locators.put("NXX", heap.insert(552322, "NXX"));
        locators.put("NYG", heap.insert(531287, "NYG"));
        locators.put("NZC", heap.insert(484128, "NZC"));
        locators.put("NZY", heap.insert(126165, "NZY"));
        locators.put("OAK", heap.insert(82277, "OAK"));
        locators.put("OFF", heap.insert(344341, "OFF"));
        locators.put("OGS", heap.insert(551409, "OGS"));
        locators.put("OKC", heap.insert(326238, "OKC"));
        locators.put("OLS", heap.insert(193144, "OLS"));
        locators.put("OMA", heap.insert(349354, "OMA"));
        locators.put("ONT", heap.insert(126203, "ONT"));
        locators.put("OPF", heap.insert(497337, "OPF"));
        locators.put("ORD", heap.insert(426341, "ORD"));
        locators.put("ORF", heap.insert(537252, "ORF"));
        locators.put("ORL", heap.insert(488827, "ORL"));
        locators.put("PAE", heap.insert(81461, "PAE"));
        locators.put("PAM", heap.insert(446129, "PAM"));
        locators.put("PBF", heap.insert(389209, "PBF"));
        locators.put("PBG", heap.insert(564418, "PBG"));
        locators.put("PBI", heap.insert(493567, "PBI"));
        locators.put("PDX", heap.insert(78428, "PDX"));
        locators.put("PHF", heap.insert(537259, "PHF"));
        locators.put("PHL", heap.insert(548306, "PHL"));
        locators.put("PHN", heap.insert(482361, "PHN"));
        locators.put("PHX", heap.insert(178192, "PHX"));
        locators.put("PIE", heap.insert(473777, "PIE"));
        locators.put("PIT", heap.insert(501334, "PIT"));
        locators.put("PMD", heap.insert(115213, "PMD"));
        locators.put("PNC", heap.insert(324240, "PNC"));
        locators.put("PNE", heap.insert(548320, "PNE"));
        locators.put("PNM", heap.insert(367423, "PNM"));
        locators.put("PNS", heap.insert(426127, "PNS"));
        locators.put("POB", heap.insert(508233, "POB"));
        locators.put("POE", heap.insert(369149, "POE"));
        locators.put("PQI", heap.insert(617448, "PQI"));
        locators.put("PRC", heap.insert(180208, "PRC"));
        locators.put("PSP", heap.insert(135192, "PSP"));
        locators.put("PSX", heap.insert(336837, "PSX"));
        locators.put("PUB", heap.insert(262291, "PUB"));
        locators.put("PVD", heap.insert(588344, "PVD"));
        locators.put("PWM", heap.insert(599395, "PWM"));
        locators.put("RAL", heap.insert(124191, "RAL"));
        locators.put("RBM", heap.insert(374217, "RBM"));
        locators.put("RCA", heap.insert(267402, "RCA"));
        locators.put("RDR", heap.insert(332476, "RDR"));
        locators.put("RDU", heap.insert(521231, "RDU"));
        locators.put("RIC", heap.insert(527278, "RIC"));
        locators.put("RIU", heap.insert(86282, "RIU"));
        locators.put("RIV", heap.insert(123188, "RIV"));
        locators.put("RME", heap.insert(548383, "RME"));
        locators.put("RND", heap.insert(315112, "RND"));
        locators.put("RNO", heap.insert(108317, "RNO"));
        locators.put("ROC", heap.insert(527398, "ROC"));
        locators.put("ROW", heap.insert(256182, "ROW"));
        locators.put("RSW", heap.insert(486417, "RSW"));
        locators.put("SAC", heap.insert(85285, "SAC"));
        locators.put("SAF", heap.insert(235221, "SAF"));
        locators.put("SAN", heap.insert(132172, "SAN"));
        locators.put("SAT", heap.insert(313116, "SAT"));
        locators.put("SAV", heap.insert(487162, "SAV"));
        locators.put("SBO", heap.insert(477172, "SBO"));
        locators.put("SBY", heap.insert(547282, "SBY"));
        locators.put("SCK", heap.insert(88269, "SCK"));
        locators.put("SEA", heap.insert(76471, "SEA"));
        locators.put("SEM", heap.insert(438169, "SEM"));
        locators.put("SFF", heap.insert(125467, "SFF"));
        locators.put("SFO", heap.insert(77276, "SFO"));
        locators.put("SFZ", heap.insert(592339, "SFZ"));
        locators.put("SHV", heap.insert(371162, "SHV"));
        locators.put("SJC", heap.insert(85262, "SJC"));
        locators.put("SJT", heap.insert(302140, "SJT"));
        locators.put("SKA", heap.insert(125466, "SKA"));
        locators.put("SKF", heap.insert(316103, "SKF"));
        locators.put("SKY", heap.insert(477346, "SKY"));
        locators.put("SLC", heap.insert(186333, "SLC"));
        locators.put("SMF", heap.insert(90280, "SMF"));
        locators.put("SNA", heap.insert(132196, "SNA"));
        locators.put("SPB", heap.insert(73429, "SPB"));
        locators.put("SPG", heap.insert(479677, "SPG"));
        locators.put("SPS", heap.insert(320191, "SPS"));
        locators.put("SSC", heap.insert(500195, "SSC"));
        locators.put("STL", heap.insert(398297, "STL"));
        locators.put("SUU", heap.insert(89286, "SUU"));
        locators.put("SUX", heap.insert(337370, "SUX"));
        locators.put("SVN", heap.insert(485178, "SVN"));
        locators.put("SWF", heap.insert(553353, "SWF"));
        locators.put("SYR", heap.insert(533387, "SYR"));
        locators.put("SZL", heap.insert(370283, "SZL"));
        locators.put("TBN", heap.insert(378264, "TBN"));
        locators.put("TCC", heap.insert(271220, "TCC"));
        locators.put("TCM", heap.insert(75459, "TCM"));
        locators.put("TCS", heap.insert(223183, "TCS"));
        locators.put("TEB", heap.insert(553333, "TEB"));
        locators.put("TIK", heap.insert(331235, "TIK"));
        locators.put("TLH", heap.insert(458126, "TLH"));
        Assertions.assertEquals(67488, Assertions.assertDoesNotThrow(heap::getMinKey));
        Assertions.assertIterableEquals(List.of("{lev: 0 nodeCt: 128}","{lev: 1 nodeCt: 64}","{lev: 2 nodeCt: 32}","{lev: 3 nodeCt: 16}","{lev: 4 nodeCt: 8}","{lev: 5 nodeCt: 4}","{lev: 6 nodeCt: 2}","{lev: 7 nodeCt: 1}","(67488)","(67488)","(67488)","(67488)","(67488)","(67488)","(67488)","[67488 NOW]","[73429 SPB]","(75459)","[75459 TCM]","[76471 SEA]","(77276)","(77276)","[77276 SFO]","[78428 PDX]","(81275)","[81275 NUQ]","[81461 PAE]","(82277)","(82277)","(82277)","[82277 OAK]","[82483 NUW]","(85262)","[85262 SJC]","[85285 SAC]","(86282)","(86282)","[86282 RIU]","[88269 SCK]","(89286)","[89286 SUU]","[90280 SMF]","(105256)","(105256)","(105256)","(105256)","[105256 NLC]","[108317 RNO]","(111477)","[111477 MWH]","[112201 NTD]","(115213)","(115213)","[115213 PMD]","[122299 NFL]","(123188)","[123188 RIV]","[124191 RAL]","(125466)","(125466)","(125466)","[125466 SKA]","[125467 SFF]","(126165)","[126165 NZY]","[126189 NTK]","(126203)","(126203)","[126203 ONT]","[129237 NID]","(131170)","[131170 NKX]","[132172 SAN]","(132196)","(132196)","(132196)","(132196)","(132196)","[132196 SNA]","[135192 PSP]","(140210)","[140210 NXP]","[144167 NJK]","(147379)","(147379)","[147379 MUO]","[178192 PHX]","(180208)","[180208 PRC]","[186333 SLC]","(193144)","(193144)","(193144)","[193144 OLS]","[223183 TCS]","(235221)","[235221 SAF]","[256182 ROW]","(262291)","(262291)","[262291 PUB]","[267402 RCA]","(271220)","[271220 TCC]","[302140 SJT]","(313116)","(313116)","(313116)","(313116)","[313116 SAT]","[315112 RND]","(316103)","[316103 SKF]","[316161 MWL]","(320191)","(320191)","[320191 SPS]","[324240 PNC]","(326238)","[326238 OKC]","[327637 NQI]","(331235)","(331235)","(331235)","[331235 TIK]","[332476 RDR]","(336837)","[336837 PSX]","[337370 SUX]","(344341)","(344341)","[344341 OFF]","[349354 OMA]","(367423)","[367423 PNM]","[369149 POE]","(370283)","(370283)","(370283)","(370283)","(370283)","(370283)","[370283 SZL]","[371162 SHV]","(374217)","[374217 RBM]","[378264 TBN]","(389209)","(389209)","[389209 PBF]","[394106 NBG]","(398297)","[398297 STL]","[410231 NQA]","(413168)","(413168)","(413168)","[413168 NMM]","[426127 PNS]","(426341)","[426341 ORD]","[428125 NSE]","(429127)","(429127)","[429127 NPA]","[434168 MXF]","(438169)","[438169 SEM]","[446129 PAM]","(458126)","(458126)","(458126)","(458126)","[458126 TLH]","[473777 PIE]","(477172)","[477172 SBO]","[477346 SKY]","(479359)","(479359)","[479359 MTC]","[479677 SPG]","(482361)","[482361 PHN]","[484128 NZC]","(485178)","(485178)","(485178)","[485178 SVN]","[486135 NIP]","(486417)","[486417 RSW]","[487162 SAV]","(488147)","(488147)","[488147 NQX]","[488827 ORL]","(493167)","[493167 NBC]","[493567 PBI]","(497337)","(497337)","(497337)","(497337)","(497337)","[497337 OPF]","[500195 SSC]","(501334)","[501334 PIT]","[508233 POB]","(519184)","(519184)","[519184 MYR]","[521231 RDU]","(527278)","[527278 RIC]","[527398 ROC]","(531287)","(531287)","(531287)","[531287 NYG]","[532218 NCA]","(533255)","[533255 NTU]","[533387 SYR]","(537252)","(537252)","[537252 ORF]","[537259 PHF]","(537290)","[537290 NHK]","[542206 NKT]","(542250)","(542250)","(542250)","(542250)","[542250 NGU]","[542333 MUI]","(547282)","[547282 SBY]","[548306 PHL]","(548320)","(548320)","[548320 PNE]","[548383 RME]","(551409)","[551409 OGS]","[552322 NXX]","(553333)","(553333)","(553333)","[553333 TEB]","[553353 SWF]","(554335)","[554335 NEL]","[564418 PBG]","(588344)","(588344)","[588344 PVD]","[592339 SFZ]","(599395)","[599395 PWM]","[617448 PQI]"), heap.listHeap());
        // Let's see what happens when we try to increase a key
        Assertions.assertThrows(IllegalArgumentException.class, () -> heap.decreaseKey(locators.get("MTC"), 479360));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("MTC"), 479359));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("MUI"), 542333));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("MUO"), 147379));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("MWH"), 111477));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("MWL"), 316161));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("MXF"), 434168));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("MYR"), 519184));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("NBC"), 493167));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("NBG"), 394106));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("NCA"), 532218));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("NEL"), 554335));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("NFL"), 122299));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("NGU"), 542250));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("NHK"), 537290));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("NID"), 129237));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("NIP"), 486135));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("NJK"), 144167));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("NKT"), 542206));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("NKX"), 131170));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("NLC"), 105256));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("NMM"), 413168));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("NOW"), 67488));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("NPA"), 429127));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("NQA"), 410231));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("NQI"), 327637));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("NQX"), 488147));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("NSE"), 428125));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("NTD"), 112201));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("NTK"), 126189));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("NTU"), 533255));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("NUQ"), 81275));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("NUW"), 82483));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("NXP"), 140210));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("NXX"), 552322));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("NYG"), 531287));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("NZC"), 484128));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("NZY"), 126165));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("OAK"), 82277));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("OFF"), 344341));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("OGS"), 551409));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("OKC"), 326238));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("OLS"), 193144));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("OMA"), 349354));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("ONT"), 126203));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("OPF"), 497337));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("ORD"), 426341));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("ORF"), 537252));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("ORL"), 488827));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("PAE"), 81461));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("PAM"), 446129));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("PBF"), 389209));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("PBG"), 564418));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("PBI"), 493567));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("PDX"), 78428));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("PHF"), 537259));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("PHL"), 548306));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("PHN"), 482361));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("PHX"), 178192));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("PIE"), 473777));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("PIT"), 501334));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("PMD"), 115213));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("PNC"), 324240));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("PNE"), 548320));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("PNM"), 367423));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("PNS"), 426127));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("POB"), 508233));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("POE"), 369149));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("PQI"), 617448));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("PRC"), 180208));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("PSP"), 135192));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("PSX"), 336837));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("PUB"), 262291));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("PVD"), 588344));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("PWM"), 599395));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("RAL"), 124191));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("RBM"), 374217));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("RCA"), 267402));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("RDR"), 332476));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("RDU"), 521231));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("RIC"), 527278));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("RIU"), 86282));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("RIV"), 123188));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("RME"), 548383));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("RND"), 315112));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("RNO"), 108317));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("ROC"), 527398));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("ROW"), 256182));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("RSW"), 486417));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("SAC"), 85285));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("SAF"), 235221));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("SAN"), 132172));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("SAT"), 313116));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("SAV"), 487162));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("SBO"), 477172));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("SBY"), 547282));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("SCK"), 88269));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("SEA"), 76471));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("SEM"), 438169));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("SFF"), 125467));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("SFO"), 77276));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("SFZ"), 592339));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("SHV"), 371162));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("SJC"), 85262));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("SJT"), 302140));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("SKA"), 125466));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("SKF"), 316103));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("SKY"), 477346));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("SLC"), 186333));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("SMF"), 90280));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("SNA"), 132196));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("SPB"), 73429));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("SPG"), 479677));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("SPS"), 320191));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("SSC"), 500195));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("STL"), 398297));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("SUU"), 89286));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("SUX"), 337370));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("SVN"), 485178));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("SWF"), 553353));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("SYR"), 533387));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("SZL"), 370283));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("TBN"), 378264));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("TCC"), 271220));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("TCM"), 75459));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("TCS"), 223183));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("TEB"), 553333));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("TIK"), 331235));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("TLH"), 458126));
        // The prior decrease-keys did not change the priorities, but according to the spec, the tree structure should be modified
        Assertions.assertIterableEquals(List.of("{lev: 0 nodeCt: 128}","[73429 SPB]","[76471 SEA]","[78428 PDX]","[81461 PAE]","[82483 NUW]","[85285 SAC]","[88269 SCK]","[90280 SMF]","[108317 RNO]","[112201 NTD]","[122299 NFL]","[124191 RAL]","[125467 SFF]","[126189 NTK]","[129237 NID]","[132172 SAN]","[135192 PSP]","[144167 NJK]","[178192 PHX]","[186333 SLC]","[223183 TCS]","[256182 ROW]","[267402 RCA]","[302140 SJT]","[315112 RND]","[316161 MWL]","[324240 PNC]","[327637 NQI]","[332476 RDR]","[337370 SUX]","[349354 OMA]","[369149 POE]","[371162 SHV]","[378264 TBN]","[394106 NBG]","[410231 NQA]","[426127 PNS]","[428125 NSE]","[434168 MXF]","[446129 PAM]","[473777 PIE]","[477346 SKY]","[479677 SPG]","[484128 NZC]","[486135 NIP]","[487162 SAV]","[488827 ORL]","[493567 PBI]","[500195 SSC]","[508233 POB]","[521231 RDU]","[527398 ROC]","[532218 NCA]","[533387 SYR]","[537259 PHF]","[542206 NKT]","[542333 MUI]","[548306 PHL]","[548383 RME]","[552322 NXX]","[553353 SWF]","[564418 PBG]","[592339 SFZ]","[617448 PQI]","{lev: 1 nodeCt: 64}","(75459)","[75459 TCM]","[null]","(81275)","[81275 NUQ]","[null]","(85262)","[85262 SJC]","[null]","(89286)","[89286 SUU]","[null]","(111477)","[111477 MWH]","[null]","(123188)","[123188 RIV]","[null]","(126165)","[126165 NZY]","[null]","(131170)","[131170 NKX]","[null]","(140210)","[140210 NXP]","[null]","(180208)","[180208 PRC]","[null]","(235221)","[235221 SAF]","[null]","(271220)","[271220 TCC]","[null]","(316103)","[316103 SKF]","[null]","(326238)","[326238 OKC]","[null]","(336837)","[336837 PSX]","[null]","(367423)","[367423 PNM]","[null]","(374217)","[374217 RBM]","[null]","(398297)","[398297 STL]","[null]","(426341)","[426341 ORD]","[null]","(438169)","[438169 SEM]","[null]","(477172)","[477172 SBO]","[null]","(482361)","[482361 PHN]","[null]","(486417)","[486417 RSW]","[null]","(493167)","[493167 NBC]","[null]","(501334)","[501334 PIT]","[null]","(527278)","[527278 RIC]","[null]","(533255)","[533255 NTU]","[null]","(537290)","[537290 NHK]","[null]","(547282)","[547282 SBY]","[null]","(551409)","[551409 OGS]","[null]","(554335)","[554335 NEL]","[null]","(599395)","[599395 PWM]","[null]","{lev: 2 nodeCt: 32}","(77276)","(77276)","[77276 SFO]","[null]","[null]","(86282)","(86282)","[86282 RIU]","[null]","[null]","(115213)","(115213)","[115213 PMD]","[null]","[null]","(126203)","(126203)","[126203 ONT]","[null]","[null]","(147379)","(147379)","[147379 MUO]","[null]","[null]","(262291)","(262291)","[262291 PUB]","[null]","[null]","(320191)","(320191)","[320191 SPS]","[null]","[null]","(344341)","(344341)","[344341 OFF]","[null]","[null]","(389209)","(389209)","[389209 PBF]","[null]","[null]","(429127)","(429127)","[429127 NPA]","[null]","[null]","(479359)","(479359)","[479359 MTC]","[null]","[null]","(488147)","(488147)","[488147 NQX]","[null]","[null]","(519184)","(519184)","[519184 MYR]","[null]","[null]","(537252)","(537252)","[537252 ORF]","[null]","[null]","(548320)","(548320)","[548320 PNE]","[null]","[null]","(588344)","(588344)","[588344 PVD]","[null]","[null]","{lev: 3 nodeCt: 16}","(82277)","(82277)","(82277)","[82277 OAK]","[null]","[null]","[null]","(125466)","(125466)","(125466)","[125466 SKA]","[null]","[null]","[null]","(193144)","(193144)","(193144)","[193144 OLS]","[null]","[null]","[null]","(331235)","(331235)","(331235)","[331235 TIK]","[null]","[null]","[null]","(413168)","(413168)","(413168)","[413168 NMM]","[null]","[null]","[null]","(485178)","(485178)","(485178)","[485178 SVN]","[null]","[null]","[null]","(531287)","(531287)","(531287)","[531287 NYG]","[null]","[null]","[null]","(553333)","(553333)","(553333)","[553333 TEB]","[null]","[null]","[null]","{lev: 4 nodeCt: 8}","(105256)","(105256)","(105256)","(105256)","[105256 NLC]","[null]","[null]","[null]","[null]","(313116)","(313116)","(313116)","(313116)","[313116 SAT]","[null]","[null]","[null]","[null]","(458126)","(458126)","(458126)","(458126)","[458126 TLH]","[null]","[null]","[null]","[null]","(542250)","(542250)","(542250)","(542250)","[542250 NGU]","[null]","[null]","[null]","[null]","{lev: 5 nodeCt: 4}","(132196)","(132196)","(132196)","(132196)","(132196)","[132196 SNA]","[null]","[null]","[null]","[null]","[null]","(497337)","(497337)","(497337)","(497337)","(497337)","[497337 OPF]","[null]","[null]","[null]","[null]","[null]","{lev: 6 nodeCt: 2}","(370283)","(370283)","(370283)","(370283)","(370283)","(370283)","[370283 SZL]","[null]","[null]","[null]","[null]","[null]","[null]","{lev: 7 nodeCt: 1}","(67488)","(67488)","(67488)","(67488)","(67488)","(67488)","(67488)","[67488 NOW]","[null]","[null]","[null]","[null]","[null]","[null]","[null]"), heap.listHeap());
        Assertions.assertEquals("NOW", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertEquals("SPB", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertEquals("TCM", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertEquals("SEA", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertEquals("SFO", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertEquals("PDX", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertEquals("NUQ", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertEquals("PAE", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertEquals("OAK", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertEquals("NUW", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertEquals("SJC", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertEquals("SAC", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertEquals("RIU", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertEquals("SCK", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertEquals("SUU", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertEquals("SMF", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertEquals("NLC", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertEquals("RNO", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertEquals("MWH", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertEquals("NTD", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertIterableEquals(List.of("{lev: 0 nodeCt: 108}","{lev: 1 nodeCt: 81}","{lev: 2 nodeCt: 54}","(115213)","(115213)","[115213 PMD]","[null]","[null]","{lev: 3 nodeCt: 33}","(122299)","(122299)","(122299)","[122299 NFL]","[124191 RAL]","(123188)","[123188 RIV]","[null]","(125467)","(125467)","[125467 SFF]","[126189 NTK]","(126165)","[126165 NZY]","[null]","{lev: 4 nodeCt: 19}","{lev: 5 nodeCt: 11}","{lev: 6 nodeCt: 6}","{lev: 7 nodeCt: 3}","(125466)","(125466)","(125466)","(125466)","(125466)","(125466)","(125466)","[125466 SKA]","[null]","[null]","[null]","(126203)","(126203)","(126203)","[126203 ONT]","[null]","[null]","(129237)","(129237)","[129237 NID]","[132172 SAN]","(131170)","[131170 NKX]","[null]","(135192)","(135192)","(135192)","(135192)","[135192 PSP]","[144167 NJK]","(140210)","[140210 NXP]","[null]","(147379)","(147379)","[147379 MUO]","[null]","[null]","(178192)","(178192)","(178192)","[178192 PHX]","[186333 SLC]","(180208)","[180208 PRC]","[null]","(223183)","(223183)","[223183 TCS]","[256182 ROW]","(235221)","[235221 SAF]","[null]","(132196)","(132196)","(132196)","(132196)","(132196)","[132196 SNA]","[null]","[null]","[null]","[null]","[null]","(531287)","(531287)","(531287)","(531287)","(531287)","(531287)","[531287 NYG]","[null]","[null]","[null]","(537252)","(537252)","(537252)","[537252 ORF]","[null]","[null]","(537259)","(537259)","[537259 PHF]","[542206 NKT]","(537290)","[537290 NHK]","[null]","(542250)","(542250)","(542250)","(542250)","[542250 NGU]","[null]","[null]","[null]","[null]","(542333)","(542333)","(542333)","(542333)","(542333)","[542333 MUI]","[548306 PHL]","(547282)","[547282 SBY]","[null]","(548320)","(548320)","[548320 PNE]","[null]","[null]","(548383)","(548383)","(548383)","[548383 RME]","[552322 NXX]","(551409)","[551409 OGS]","[null]","(553353)","(553353)","[553353 SWF]","[564418 PBG]","(554335)","[554335 NEL]","[null]","(553333)","(553333)","(553333)","(553333)","[553333 TEB]","[null]","[null]","[null]","(588344)","(588344)","(588344)","[588344 PVD]","[null]","[null]","(592339)","(592339)","[592339 SFZ]","[617448 PQI]","(599395)","[599395 PWM]","[null]","(193144)","(193144)","(193144)","(193144)","(193144)","(193144)","(193144)","[193144 OLS]","[null]","[null]","[null]","(262291)","(262291)","(262291)","[262291 PUB]","[null]","[null]","(267402)","(267402)","[267402 RCA]","[302140 SJT]","(271220)","[271220 TCC]","[null]","(313116)","(313116)","(313116)","(313116)","[313116 SAT]","[null]","[null]","[null]","[null]","(315112)","(315112)","(315112)","(315112)","(315112)","[315112 RND]","[316161 MWL]","(316103)","[316103 SKF]","[null]","(320191)","(320191)","[320191 SPS]","[null]","[null]","(324240)","(324240)","(324240)","[324240 PNC]","[327637 NQI]","(326238)","[326238 OKC]","[null]","(332476)","(332476)","[332476 RDR]","[337370 SUX]","(336837)","[336837 PSX]","[null]","(331235)","(331235)","(331235)","(331235)","[331235 TIK]","[null]","[null]","[null]","(344341)","(344341)","(344341)","[344341 OFF]","[null]","[null]","(349354)","(349354)","[349354 OMA]","[369149 POE]","(367423)","[367423 PNM]","[null]","(370283)","(370283)","(370283)","(370283)","(370283)","(370283)","[370283 SZL]","[null]","[null]","[null]","[null]","[null]","[null]","(371162)","(371162)","(371162)","(371162)","(371162)","(371162)","(371162)","[371162 SHV]","[378264 TBN]","(374217)","[374217 RBM]","[null]","(389209)","(389209)","[389209 PBF]","[null]","[null]","(394106)","(394106)","(394106)","[394106 NBG]","[410231 NQA]","(398297)","[398297 STL]","[null]","(426127)","(426127)","[426127 PNS]","[428125 NSE]","(426341)","[426341 ORD]","[null]","(413168)","(413168)","(413168)","(413168)","[413168 NMM]","[null]","[null]","[null]","(429127)","(429127)","(429127)","[429127 NPA]","[null]","[null]","(434168)","(434168)","[434168 MXF]","[446129 PAM]","(438169)","[438169 SEM]","[null]","(458126)","(458126)","(458126)","(458126)","(458126)","[458126 TLH]","[null]","[null]","[null]","[null]","(473777)","(473777)","(473777)","(473777)","[473777 PIE]","[477346 SKY]","(477172)","[477172 SBO]","[null]","(479359)","(479359)","[479359 MTC]","[null]","[null]","(479677)","(479677)","(479677)","[479677 SPG]","[484128 NZC]","(482361)","[482361 PHN]","[null]","(486135)","(486135)","[486135 NIP]","[487162 SAV]","(486417)","[486417 RSW]","[null]","(485178)","(485178)","(485178)","(485178)","(485178)","(485178)","[485178 SVN]","[null]","[null]","[null]","(488147)","(488147)","(488147)","[488147 NQX]","[null]","[null]","(488827)","(488827)","[488827 ORL]","[493567 PBI]","(493167)","[493167 NBC]","[null]","(500195)","(500195)","(500195)","(500195)","[500195 SSC]","[508233 POB]","(501334)","[501334 PIT]","[null]","(519184)","(519184)","[519184 MYR]","[null]","[null]","(521231)","(521231)","(521231)","[521231 RDU]","[527398 ROC]","(527278)","[527278 RIC]","[null]","(532218)","(532218)","[532218 NCA]","[533387 SYR]","(533255)","[533255 NTU]","[null]","(497337)","(497337)","(497337)","(497337)","(497337)","[497337 OPF]","[null]","[null]","[null]","[null]","[null]"), heap.listHeap());
        Assertions.assertEquals("PMD", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertEquals("NFL", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertEquals("RIV", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertEquals("RAL", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertEquals("SKA", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertEquals("SFF", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertEquals("NZY", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertEquals("NTK", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertEquals("ONT", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertEquals("NID", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertEquals("NKX", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertEquals("SAN", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertEquals("SNA", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertEquals("PSP", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertEquals("NXP", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertEquals("NJK", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertEquals("MUO", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertEquals("PHX", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertEquals("PRC", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertEquals("SLC", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertIterableEquals(List.of("{lev: 0 nodeCt: 88}","{lev: 1 nodeCt: 66}","{lev: 2 nodeCt: 44}","(223183)","(223183)","[223183 TCS]","[256182 ROW]","(235221)","[235221 SAF]","[null]","{lev: 3 nodeCt: 27}","{lev: 4 nodeCt: 16}","{lev: 5 nodeCt: 9}","{lev: 6 nodeCt: 5}","(531287)","(531287)","(531287)","(531287)","(531287)","(531287)","[531287 NYG]","[null]","[null]","[null]","(537252)","(537252)","(537252)","[537252 ORF]","[null]","[null]","(537259)","(537259)","[537259 PHF]","[542206 NKT]","(537290)","[537290 NHK]","[null]","(542250)","(542250)","(542250)","(542250)","[542250 NGU]","[null]","[null]","[null]","[null]","(542333)","(542333)","(542333)","(542333)","(542333)","[542333 MUI]","[548306 PHL]","(547282)","[547282 SBY]","[null]","(548320)","(548320)","[548320 PNE]","[null]","[null]","(548383)","(548383)","(548383)","[548383 RME]","[552322 NXX]","(551409)","[551409 OGS]","[null]","(553353)","(553353)","[553353 SWF]","[564418 PBG]","(554335)","[554335 NEL]","[null]","(553333)","(553333)","(553333)","(553333)","[553333 TEB]","[null]","[null]","[null]","(588344)","(588344)","(588344)","[588344 PVD]","[null]","[null]","(592339)","(592339)","[592339 SFZ]","[617448 PQI]","(599395)","[599395 PWM]","[null]","{lev: 7 nodeCt: 2}","(193144)","(193144)","(193144)","(193144)","(193144)","(193144)","(193144)","[193144 OLS]","[null]","[null]","[null]","(262291)","(262291)","(262291)","[262291 PUB]","[null]","[null]","(267402)","(267402)","[267402 RCA]","[302140 SJT]","(271220)","[271220 TCC]","[null]","(313116)","(313116)","(313116)","(313116)","[313116 SAT]","[null]","[null]","[null]","[null]","(315112)","(315112)","(315112)","(315112)","(315112)","[315112 RND]","[316161 MWL]","(316103)","[316103 SKF]","[null]","(320191)","(320191)","[320191 SPS]","[null]","[null]","(324240)","(324240)","(324240)","[324240 PNC]","[327637 NQI]","(326238)","[326238 OKC]","[null]","(332476)","(332476)","[332476 RDR]","[337370 SUX]","(336837)","[336837 PSX]","[null]","(331235)","(331235)","(331235)","(331235)","[331235 TIK]","[null]","[null]","[null]","(344341)","(344341)","(344341)","[344341 OFF]","[null]","[null]","(349354)","(349354)","[349354 OMA]","[369149 POE]","(367423)","[367423 PNM]","[null]","(370283)","(370283)","(370283)","(370283)","(370283)","(370283)","[370283 SZL]","[null]","[null]","[null]","[null]","[null]","[null]","(371162)","(371162)","(371162)","(371162)","(371162)","(371162)","(371162)","[371162 SHV]","[378264 TBN]","(374217)","[374217 RBM]","[null]","(389209)","(389209)","[389209 PBF]","[null]","[null]","(394106)","(394106)","(394106)","[394106 NBG]","[410231 NQA]","(398297)","[398297 STL]","[null]","(426127)","(426127)","[426127 PNS]","[428125 NSE]","(426341)","[426341 ORD]","[null]","(413168)","(413168)","(413168)","(413168)","[413168 NMM]","[null]","[null]","[null]","(429127)","(429127)","(429127)","[429127 NPA]","[null]","[null]","(434168)","(434168)","[434168 MXF]","[446129 PAM]","(438169)","[438169 SEM]","[null]","(458126)","(458126)","(458126)","(458126)","(458126)","[458126 TLH]","[null]","[null]","[null]","[null]","(473777)","(473777)","(473777)","(473777)","[473777 PIE]","[477346 SKY]","(477172)","[477172 SBO]","[null]","(479359)","(479359)","[479359 MTC]","[null]","[null]","(479677)","(479677)","(479677)","[479677 SPG]","[484128 NZC]","(482361)","[482361 PHN]","[null]","(486135)","(486135)","[486135 NIP]","[487162 SAV]","(486417)","[486417 RSW]","[null]","(485178)","(485178)","(485178)","(485178)","(485178)","(485178)","[485178 SVN]","[null]","[null]","[null]","(488147)","(488147)","(488147)","[488147 NQX]","[null]","[null]","(488827)","(488827)","[488827 ORL]","[493567 PBI]","(493167)","[493167 NBC]","[null]","(500195)","(500195)","(500195)","(500195)","[500195 SSC]","[508233 POB]","(501334)","[501334 PIT]","[null]","(519184)","(519184)","[519184 MYR]","[null]","[null]","(521231)","(521231)","(521231)","[521231 RDU]","[527398 ROC]","(527278)","[527278 RIC]","[null]","(532218)","(532218)","[532218 NCA]","[533387 SYR]","(533255)","[533255 NTU]","[null]","(497337)","(497337)","(497337)","(497337)","(497337)","[497337 OPF]","[null]","[null]","[null]","[null]","[null]"), heap.listHeap());
        Assertions.assertEquals("OLS", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertEquals("TCS", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertEquals("SAF", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertEquals("ROW", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertEquals("PUB", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertEquals("RCA", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertEquals("TCC", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertEquals("SJT", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertEquals("SAT", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertEquals("RND", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertEquals("SKF", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertEquals("MWL", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertEquals("SPS", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertEquals("PNC", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertEquals("OKC", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertEquals("NQI", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertEquals("TIK", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertEquals("RDR", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertEquals("PSX", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertEquals("SUX", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertIterableEquals(List.of("{lev: 0 nodeCt: 68}","{lev: 1 nodeCt: 51}","{lev: 2 nodeCt: 34}","{lev: 3 nodeCt: 21}","(344341)","(344341)","(344341)","[344341 OFF]","[null]","[null]","(349354)","(349354)","[349354 OMA]","[369149 POE]","(367423)","[367423 PNM]","[null]","{lev: 4 nodeCt: 12}","{lev: 5 nodeCt: 7}","{lev: 6 nodeCt: 4}","{lev: 7 nodeCt: 2}","(370283)","(370283)","(370283)","(370283)","(370283)","(370283)","(370283)","[370283 SZL]","[null]","[null]","[null]","[null]","[null]","[null]","(531287)","(531287)","(531287)","(531287)","(531287)","(531287)","[531287 NYG]","[null]","[null]","[null]","(537252)","(537252)","(537252)","[537252 ORF]","[null]","[null]","(537259)","(537259)","[537259 PHF]","[542206 NKT]","(537290)","[537290 NHK]","[null]","(542250)","(542250)","(542250)","(542250)","[542250 NGU]","[null]","[null]","[null]","[null]","(542333)","(542333)","(542333)","(542333)","(542333)","[542333 MUI]","[548306 PHL]","(547282)","[547282 SBY]","[null]","(548320)","(548320)","[548320 PNE]","[null]","[null]","(548383)","(548383)","(548383)","[548383 RME]","[552322 NXX]","(551409)","[551409 OGS]","[null]","(553353)","(553353)","[553353 SWF]","[564418 PBG]","(554335)","[554335 NEL]","[null]","(553333)","(553333)","(553333)","(553333)","[553333 TEB]","[null]","[null]","[null]","(588344)","(588344)","(588344)","[588344 PVD]","[null]","[null]","(592339)","(592339)","[592339 SFZ]","[617448 PQI]","(599395)","[599395 PWM]","[null]","(371162)","(371162)","(371162)","(371162)","(371162)","(371162)","(371162)","[371162 SHV]","[378264 TBN]","(374217)","[374217 RBM]","[null]","(389209)","(389209)","[389209 PBF]","[null]","[null]","(394106)","(394106)","(394106)","[394106 NBG]","[410231 NQA]","(398297)","[398297 STL]","[null]","(426127)","(426127)","[426127 PNS]","[428125 NSE]","(426341)","[426341 ORD]","[null]","(413168)","(413168)","(413168)","(413168)","[413168 NMM]","[null]","[null]","[null]","(429127)","(429127)","(429127)","[429127 NPA]","[null]","[null]","(434168)","(434168)","[434168 MXF]","[446129 PAM]","(438169)","[438169 SEM]","[null]","(458126)","(458126)","(458126)","(458126)","(458126)","[458126 TLH]","[null]","[null]","[null]","[null]","(473777)","(473777)","(473777)","(473777)","[473777 PIE]","[477346 SKY]","(477172)","[477172 SBO]","[null]","(479359)","(479359)","[479359 MTC]","[null]","[null]","(479677)","(479677)","(479677)","[479677 SPG]","[484128 NZC]","(482361)","[482361 PHN]","[null]","(486135)","(486135)","[486135 NIP]","[487162 SAV]","(486417)","[486417 RSW]","[null]","(485178)","(485178)","(485178)","(485178)","(485178)","(485178)","[485178 SVN]","[null]","[null]","[null]","(488147)","(488147)","(488147)","[488147 NQX]","[null]","[null]","(488827)","(488827)","[488827 ORL]","[493567 PBI]","(493167)","[493167 NBC]","[null]","(500195)","(500195)","(500195)","(500195)","[500195 SSC]","[508233 POB]","(501334)","[501334 PIT]","[null]","(519184)","(519184)","[519184 MYR]","[null]","[null]","(521231)","(521231)","(521231)","[521231 RDU]","[527398 ROC]","(527278)","[527278 RIC]","[null]","(532218)","(532218)","[532218 NCA]","[533387 SYR]","(533255)","[533255 NTU]","[null]","(497337)","(497337)","(497337)","(497337)","(497337)","[497337 OPF]","[null]","[null]","[null]","[null]","[null]"), heap.listHeap());
        // The following should generate an error
        Assertions.assertThrows(IllegalArgumentException.class, () -> heap.setNLevels(0));
        // The following decrease in levels will result in level 5 having multiple roots
        heap.setNLevels(6);
        Assertions.assertEquals("OFF", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertEquals("OMA", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertEquals("PNM", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertEquals("POE", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertEquals("SZL", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertEquals("SHV", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertEquals("RBM", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertEquals("TBN", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertEquals("PBF", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertEquals("NBG", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertEquals("STL", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertEquals("NQA", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertEquals("NMM", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertEquals("PNS", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertEquals("ORD", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertEquals("NSE", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertEquals("NPA", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertEquals("MXF", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertEquals("SEM", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertEquals("PAM", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertIterableEquals(List.of("{lev: 0 nodeCt: 48}","{lev: 1 nodeCt: 36}","{lev: 2 nodeCt: 24}","{lev: 3 nodeCt: 15}","{lev: 4 nodeCt: 9}","{lev: 5 nodeCt: 5}","(458126)","(458126)","(458126)","(458126)","(458126)","[458126 TLH]","[null]","[null]","[null]","[null]","(473777)","(473777)","(473777)","(473777)","[473777 PIE]","[477346 SKY]","(477172)","[477172 SBO]","[null]","(479359)","(479359)","[479359 MTC]","[null]","[null]","(479677)","(479677)","(479677)","[479677 SPG]","[484128 NZC]","(482361)","[482361 PHN]","[null]","(486135)","(486135)","[486135 NIP]","[487162 SAV]","(486417)","[486417 RSW]","[null]","(485178)","(485178)","(485178)","(485178)","(485178)","[485178 SVN]","[null]","[null]","[null]","(488147)","(488147)","(488147)","[488147 NQX]","[null]","[null]","(488827)","(488827)","[488827 ORL]","[493567 PBI]","(493167)","[493167 NBC]","[null]","(500195)","(500195)","(500195)","(500195)","[500195 SSC]","[508233 POB]","(501334)","[501334 PIT]","[null]","(519184)","(519184)","[519184 MYR]","[null]","[null]","(521231)","(521231)","(521231)","[521231 RDU]","[527398 ROC]","(527278)","[527278 RIC]","[null]","(532218)","(532218)","[532218 NCA]","[533387 SYR]","(533255)","[533255 NTU]","[null]","(497337)","(497337)","(497337)","(497337)","(497337)","[497337 OPF]","[null]","[null]","[null]","[null]","[null]","(531287)","(531287)","(531287)","(531287)","(531287)","[531287 NYG]","[null]","[null]","[null]","(537252)","(537252)","(537252)","[537252 ORF]","[null]","[null]","(537259)","(537259)","[537259 PHF]","[542206 NKT]","(537290)","[537290 NHK]","[null]","(542250)","(542250)","(542250)","(542250)","[542250 NGU]","[null]","[null]","[null]","[null]","(542333)","(542333)","(542333)","(542333)","(542333)","[542333 MUI]","[548306 PHL]","(547282)","[547282 SBY]","[null]","(548320)","(548320)","[548320 PNE]","[null]","[null]","(548383)","(548383)","(548383)","[548383 RME]","[552322 NXX]","(551409)","[551409 OGS]","[null]","(553353)","(553353)","[553353 SWF]","[564418 PBG]","(554335)","[554335 NEL]","[null]","(553333)","(553333)","(553333)","(553333)","[553333 TEB]","[null]","[null]","[null]","(588344)","(588344)","(588344)","[588344 PVD]","[null]","[null]","(592339)","(592339)","[592339 SFZ]","[617448 PQI]","(599395)","[599395 PWM]","[null]"), heap.listHeap());
        Assertions.assertEquals("TLH", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertEquals("PIE", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertEquals("SBO", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertEquals("SKY", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertEquals("MTC", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertEquals("SPG", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertEquals("PHN", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertEquals("NZC", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertEquals("SVN", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertEquals("NIP", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertEquals("RSW", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertEquals("SAV", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertEquals("NQX", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertEquals("ORL", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertEquals("NBC", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertEquals("PBI", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertEquals("OPF", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertEquals("SSC", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertEquals("PIT", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertEquals("POB", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertIterableEquals(List.of("{lev: 0 nodeCt: 28}","{lev: 1 nodeCt: 21}","{lev: 2 nodeCt: 14}","(519184)","(519184)","[519184 MYR]","[null]","[null]","{lev: 3 nodeCt: 8}","(521231)","(521231)","(521231)","[521231 RDU]","[527398 ROC]","(527278)","[527278 RIC]","[null]","(532218)","(532218)","[532218 NCA]","[533387 SYR]","(533255)","[533255 NTU]","[null]","{lev: 4 nodeCt: 4}","{lev: 5 nodeCt: 2}","(531287)","(531287)","(531287)","(531287)","(531287)","[531287 NYG]","[null]","[null]","[null]","(537252)","(537252)","(537252)","[537252 ORF]","[null]","[null]","(537259)","(537259)","[537259 PHF]","[542206 NKT]","(537290)","[537290 NHK]","[null]","(542250)","(542250)","(542250)","(542250)","[542250 NGU]","[null]","[null]","[null]","[null]","(542333)","(542333)","(542333)","(542333)","(542333)","[542333 MUI]","[548306 PHL]","(547282)","[547282 SBY]","[null]","(548320)","(548320)","[548320 PNE]","[null]","[null]","(548383)","(548383)","(548383)","[548383 RME]","[552322 NXX]","(551409)","[551409 OGS]","[null]","(553353)","(553353)","[553353 SWF]","[564418 PBG]","(554335)","[554335 NEL]","[null]","(553333)","(553333)","(553333)","(553333)","[553333 TEB]","[null]","[null]","[null]","(588344)","(588344)","(588344)","[588344 PVD]","[null]","[null]","(592339)","(592339)","[592339 SFZ]","[617448 PQI]","(599395)","[599395 PWM]","[null]"), heap.listHeap());
        Assertions.assertEquals("MYR", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertEquals("RDU", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertEquals("RIC", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertEquals("ROC", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertEquals("NYG", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertEquals("NCA", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertEquals("NTU", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertEquals("SYR", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertEquals("ORF", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertEquals("PHF", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertEquals("NHK", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertEquals("NKT", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertEquals("NGU", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertEquals("MUI", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertEquals("SBY", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertEquals("PHL", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertEquals("PNE", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertEquals("RME", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertEquals("OGS", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertEquals("NXX", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertIterableEquals(List.of("{lev: 0 nodeCt: 8}","{lev: 1 nodeCt: 6}","{lev: 2 nodeCt: 4}","(553353)","(553353)","[553353 SWF]","[564418 PBG]","(554335)","[554335 NEL]","[null]","{lev: 3 nodeCt: 2}","{lev: 4 nodeCt: 1}","(553333)","(553333)","(553333)","(553333)","[553333 TEB]","[null]","[null]","[null]","(588344)","(588344)","(588344)","[588344 PVD]","[null]","[null]","(592339)","(592339)","[592339 SFZ]","[617448 PQI]","(599395)","[599395 PWM]","[null]"), heap.listHeap());
        Assertions.assertEquals("TEB", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertEquals("SWF", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertEquals("NEL", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertEquals("PBG", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertEquals("PVD", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertEquals("SFZ", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertEquals("PWM", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertEquals("PQI", Assertions.assertDoesNotThrow(heap::extractMin));
        // The heap should now be empty
        Assertions.assertIterableEquals(List.of(), heap.listHeap());
        Assertions.assertThrows(EmptyHeapException.class, heap::extractMin);
        Assertions.assertThrows(EmptyHeapException.class, heap::getMinKey);
    }

}
