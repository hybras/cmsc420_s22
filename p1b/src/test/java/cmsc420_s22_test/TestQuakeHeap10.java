package cmsc420_s22_test;

import cmsc420_s22.EmptyHeapException;
import cmsc420_s22.QuakeHeap;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

import java.util.HashMap;
import java.util.List;

public class TestQuakeHeap10 {

    @Test
    void test10() {
        // This test involves 382 entries and lots of decrease-keys, extract-mins, and quakes
        var heap = new QuakeHeap<Integer, String>(9);
        var locators = new HashMap<String, QuakeHeap<Integer, String>.Locator>();
        heap.setQuakeRatio(0.750000);
        locators.put("ABI", heap.insert(311160, "ABI"));
        locators.put("ACK", heap.insert(601339, "ACK"));
        locators.put("ACT", heap.insert(330148, "ACT"));
        locators.put("ACY", heap.insert(558312, "ACY"));
        locators.put("ADM", heap.insert(328209, "ADM"));
        locators.put("ADW", heap.insert(539282, "ADW"));
        locators.put("AEX", heap.insert(378154, "AEX"));
        locators.put("AGS", heap.insert(483188, "AGS"));
        locators.put("AKR", heap.insert(483344, "AKR"));
        locators.put("ALB", heap.insert(563362, "ALB"));
        locators.put("ALI", heap.insert(313627, "ALI"));
        locators.put("AMA", heap.insert(291220, "AMA"));
        locators.put("ANB", heap.insert(446188, "ANB"));
        locators.put("AND", heap.insert(481206, "AND"));
        locators.put("AOO", heap.insert(516322, "AOO"));
        locators.put("APG", heap.insert(542301, "APG"));
        locators.put("ARA", heap.insert(385124, "ARA"));
        locators.put("ART", heap.insert(542381, "ART"));
        locators.put("ATL", heap.insert(462189, "ATL"));
        locators.put("AUG", heap.insert(605412, "AUG"));
        locators.put("AUS", heap.insert(327126, "AUS"));
        locators.put("BAB", heap.insert(89299, "BAB"));
        locators.put("BAD", heap.insert(365166, "BAD"));
        locators.put("BCT", heap.insert(495497, "BCT"));
        locators.put("BDE", heap.insert(360480, "BDE"));
        locators.put("BDL", heap.insert(580345, "BDL"));
        locators.put("BDR", heap.insert(567354, "BDR"));
        locators.put("BED", heap.insert(585377, "BED"));
        locators.put("BFI", heap.insert(74477, "BFI"));
        locators.put("BFL", heap.insert(105230, "BFL"));
        locators.put("BFM", heap.insert(413128, "BFM"));
        locators.put("BGR", heap.insert(614409, "BGR"));
        locators.put("BHM", heap.insert(439193, "BHM"));
        locators.put("BIF", heap.insert(233143, "BIF"));
        locators.put("BIX", heap.insert(418129, "BIX"));
        locators.put("BKF", heap.insert(253302, "BKF"));
        locators.put("BLI", heap.insert(82492, "BLI"));
        locators.put("BLV", heap.insert(405293, "BLV"));
        locators.put("BNA", heap.insert(439257, "BNA"));
        locators.put("BOI", heap.insert(142396, "BOI"));
        locators.put("BOS", heap.insert(583374, "BOS"));
        locators.put("BPT", heap.insert(362112, "BPT"));
        locators.put("BRO", heap.insert(327317, "BRO"));
        locators.put("BTR", heap.insert(391119, "BTR"));
        locators.put("BTV", heap.insert(563408, "BTV"));
        locators.put("BUF", heap.insert(518370, "BUF"));
        locators.put("BUR", heap.insert(122217, "BUR"));
        locators.put("BWI", heap.insert(538302, "BWI"));
        locators.put("BYH", heap.insert(409236, "BYH"));
        locators.put("BYS", heap.insert(142222, "BYS"));
        locators.put("CAE", heap.insert(485185, "CAE"));
        locators.put("CAR", heap.insert(616444, "CAR"));
        locators.put("CBM", heap.insert(421196, "CBM"));
        locators.put("CDC", heap.insert(167269, "CDC"));
        locators.put("CDS", heap.insert(293216, "CDS"));
        locators.put("CEF", heap.insert(578368, "CEF"));
        locators.put("CEW", heap.insert(439135, "CEW"));
        locators.put("CFD", heap.insert(333137, "CFD"));
        locators.put("CHA", heap.insert(445233, "CHA"));
        locators.put("CHS", heap.insert(494160, "CHS"));
        locators.put("CIC", heap.insert(89305, "CIC"));
        locators.put("CLE", heap.insert(488343, "CLE"));
        locators.put("CLL", heap.insert(337136, "CLL"));
        locators.put("CLT", heap.insert(494228, "CLT"));
        locators.put("CMH", heap.insert(473312, "CMH"));
        locators.put("CNM", heap.insert(256175, "CNM"));
        locators.put("CNW", heap.insert(331154, "CNW"));
        locators.put("COF", heap.insert(500877, "COF"));
        locators.put("COS", heap.insert(260296, "COS"));
        locators.put("COT", heap.insert(306907, "COT"));
        locators.put("COU", heap.insert(378283, "COU"));
        locators.put("CPR", heap.insert(235370, "CPR"));
        locators.put("CRP", heap.insert(328617, "CRP"));
        locators.put("CTB", heap.insert(181492, "CTB"));
        locators.put("CVG", heap.insert(457305, "CVG"));
        locators.put("CVS", heap.insert(267210, "CVS"));
        locators.put("CXL", heap.insert(148160, "CXL"));
        locators.put("CXO", heap.insert(345137, "CXO"));
        locators.put("CYS", heap.insert(257341, "CYS"));
        locators.put("DAL", heap.insert(342164, "DAL"));
        locators.put("DAY", heap.insert(457302, "DAY"));
        locators.put("DCA", heap.insert(525296, "DCA"));
        locators.put("DEN", heap.insert(256313, "DEN"));
        locators.put("DET", heap.insert(464364, "DET"));
        locators.put("DFW", heap.insert(332168, "DFW"));
        locators.put("DHN", heap.insert(445157, "DHN"));
        locators.put("DHT", heap.insert(278251, "DHT"));
        locators.put("DLF", heap.insert(298112, "DLF"));
        locators.put("DLH", heap.insert(380454, "DLH"));
        locators.put("DMA", heap.insert(197170, "DMA"));
        locators.put("DOV", heap.insert(544313, "DOV"));
        locators.put("DPA", heap.insert(414352, "DPA"));
        locators.put("DRI", heap.insert(366135, "DRI"));
        locators.put("DRO", heap.insert(229277, "DRO"));
        locators.put("DRT", heap.insert(301104, "DRT"));
        locators.put("DSM", heap.insert(366357, "DSM"));
        locators.put("DTW", heap.insert(465363, "DTW"));
        locators.put("DUG", heap.insert(203147, "DUG"));
        locators.put("DYS", heap.insert(303174, "DYS"));
        locators.put("ECG", heap.insert(536252, "ECG"));
        locators.put("EDW", heap.insert(125206, "EDW"));
        locators.put("EFD", heap.insert(349115, "EFD"));
        locators.put("EGP", heap.insert(294837, "EGP"));
        locators.put("EKN", heap.insert(512286, "EKN"));
        locators.put("ELD", heap.insert(382179, "ELD"));
        locators.put("ELP", heap.insert(238150, "ELP"));
        locators.put("END", heap.insert(323248, "END"));
        locators.put("ENV", heap.insert(157331, "ENV"));
        locators.put("ESF", heap.insert(377155, "ESF"));
        locators.put("EWN", heap.insert(526231, "EWN"));
        locators.put("EWR", heap.insert(556325, "EWR"));
        locators.put("EYW", heap.insert(4834, "EYW"));
        locators.put("FAF", heap.insert(537272, "FAF"));
        locators.put("FAT", heap.insert(108239, "FAT"));
        locators.put("FCS", heap.insert(261294, "FCS"));
        locators.put("FFO", heap.insert(461304, "FFO"));
        locators.put("FHU", heap.insert(201156, "FHU"));
        locators.put("FLL", heap.insert(497467, "FLL"));
        locators.put("FLO", heap.insert(504204, "FLO"));
        locators.put("FLV", heap.insert(356300, "FLV"));
        locators.put("FMH", heap.insert(593343, "FMH"));
        locators.put("FMN", heap.insert(219258, "FMN"));
        locators.put("FMY", heap.insert(483567, "FMY"));
        locators.put("FOD", heap.insert(355371, "FOD"));
        locators.put("FOE", heap.insert(348297, "FOE"));
        locators.put("FOK", heap.insert(575331, "FOK"));
        locators.put("FRI", heap.insert(335316, "FRI"));
        locators.put("FSI", heap.insert(322208, "FSI"));
        locators.put("FSM", heap.insert(360226, "FSM"));
        locators.put("FTK", heap.insert(443259, "FTK"));
        locators.put("FTW", heap.insert(332163, "FTW"));
        locators.put("FXE", heap.insert(500507, "FXE"));
        locators.put("FYV", heap.insert(360252, "FYV"));
        locators.put("GAG", heap.insert(309248, "GAG"));
        locators.put("GCK", heap.insert(299267, "GCK"));
        locators.put("GEG", heap.insert(127465, "GEG"));
        locators.put("GFK", heap.insert(324468, "GFK"));
        locators.put("GGG", heap.insert(358176, "GGG"));
        locators.put("GLS", heap.insert(362107, "GLS"));
        locators.put("GNT", heap.insert(232226, "GNT"));
        locators.put("GNV", heap.insert(476114, "GNV"));
        locators.put("GRB", heap.insert(422404, "GRB"));
        locators.put("GRF", heap.insert(76463, "GRF"));
        locators.put("GRK", heap.insert(323151, "GRK"));
        locators.put("GRR", heap.insert(450377, "GRR"));
        locators.put("GSB", heap.insert(526221, "GSB"));
        locators.put("GTB", heap.insert(550405, "GTB"));
        locators.put("GTF", heap.insert(186465, "GTF"));
        locators.put("GUS", heap.insert(440321, "GUS"));
        locators.put("GVT", heap.insert(333192, "GVT"));
        locators.put("GVW", heap.insert(360280, "GVW"));
        locators.put("GWO", heap.insert(394196, "GWO"));
        locators.put("HBR", heap.insert(308217, "HBR"));
        locators.put("HFD", heap.insert(579353, "HFD"));
        locators.put("HHR", heap.insert(119198, "HHR"));
        locators.put("HIB", heap.insert(378461, "HIB"));
        locators.put("HIF", heap.insert(188354, "HIF"));
        locators.put("HKY", heap.insert(485223, "HKY"));
        locators.put("HLN", heap.insert(184458, "HLN"));
        locators.put("HLR", heap.insert(329151, "HLR"));
        locators.put("HMN", heap.insert(239164, "HMN"));
        locators.put("HOB", heap.insert(268160, "HOB"));
        locators.put("HON", heap.insert(313411, "HON"));
        locators.put("HOP", heap.insert(424241, "HOP"));
        locators.put("HOU", heap.insert(348103, "HOU"));
        locators.put("HPN", heap.insert(565353, "HPN"));
        locators.put("HRL", heap.insert(324577, "HRL"));
        locators.put("HRO", heap.insert(370254, "HRO"));
        locators.put("HRT", heap.insert(436121, "HRT"));
        locators.put("HST", heap.insert(497237, "HST"));
        locators.put("HTL", heap.insert(455417, "HTL"));
        locators.put("HUA", heap.insert(439211, "HUA"));
        locators.put("HUF", heap.insert(426315, "HUF"));
        locators.put("HUL", heap.insert(628454, "HUL"));
        locators.put("HVR", heap.insert(206491, "HVR"));
        locators.put("HWO", heap.insert(494537, "HWO"));
        locators.put("IAB", heap.insert(324274, "IAB"));
        locators.put("IAD", heap.insert(524292, "IAD"));
        locators.put("IAG", heap.insert(513394, "IAG"));
        locators.put("IAH", heap.insert(344100, "IAH"));
        locators.put("ICT", heap.insert(324268, "ICT"));
        locators.put("IKK", heap.insert(424341, "IKK"));
        locators.put("ABQ", heap.insert(234233, "ABQ"));
        locators.put("ILG", heap.insert(547313, "ILG"));
        locators.put("ILM", heap.insert(532213, "ILM"));
        locators.put("IND", heap.insert(439313, "IND"));
        locators.put("INK", heap.insert(265146, "INK"));
        locators.put("INL", heap.insert(369497, "INL"));
        locators.put("INS", heap.insert(150255, "INS"));
        locators.put("INT", heap.insert(493249, "INT"));
        locators.put("IPL", heap.insert(151172, "IPL"));
        locators.put("IPT", heap.insert(542352, "IPT"));
        locators.put("ISN", heap.insert(270491, "ISN"));
        locators.put("ISP", heap.insert(563322, "ISP"));
        locators.put("JAN", heap.insert(398172, "JAN"));
        locators.put("JAX", heap.insert(488137, "JAX"));
        locators.put("JBR", heap.insert(398232, "JBR"));
        locators.put("JFK", heap.insert(566337, "JFK"));
        locators.put("LAN", heap.insert(459373, "LAN"));
        locators.put("LAS", heap.insert(148251, "LAS"));
        locators.put("LAX", heap.insert(119181, "LAX"));
        locators.put("LBB", heap.insert(292185, "LBB"));
        locators.put("LCH", heap.insert(365120, "LCH"));
        locators.put("LCK", heap.insert(481311, "LCK"));
        locators.put("LFI", heap.insert(537270, "LFI"));
        locators.put("LFK", heap.insert(361148, "LFK"));
        locators.put("LFT", heap.insert(384132, "LFT"));
        locators.put("LGA", heap.insert(567334, "LGA"));
        locators.put("LGB", heap.insert(118181, "LGB"));
        locators.put("LHW", heap.insert(489156, "LHW"));
        locators.put("LIT", heap.insert(376210, "LIT"));
        locators.put("LNA", heap.insert(493497, "LNA"));
        locators.put("LNK", heap.insert(342336, "LNK"));
        locators.put("LOU", heap.insert(444294, "LOU"));
        locators.put("LRD", heap.insert(304727, "LRD"));
        locators.put("LRF", heap.insert(380210, "LRF"));
        locators.put("LSF", heap.insert(459159, "LSF"));
        locators.put("LSV", heap.insert(152254, "LSV"));
        locators.put("LTS", heap.insert(309202, "LTS"));
        locators.put("LUF", heap.insert(182185, "LUF"));
        locators.put("LUK", heap.insert(460302, "LUK"));
        locators.put("MAF", heap.insert(275141, "MAF"));
        locators.put("MCC", heap.insert(85280, "MCC"));
        locators.put("MCF", heap.insert(473747, "MCF"));
        locators.put("MCI", heap.insert(356309, "MCI"));
        locators.put("MCN", heap.insert(468171, "MCN"));
        locators.put("MCO", heap.insert(491967, "MCO"));
        locators.put("MDT", heap.insert(538320, "MDT"));
        locators.put("MDW", heap.insert(425353, "MDW"));
        locators.put("MEM", heap.insert(405229, "MEM"));
        locators.put("MER", heap.insert(99271, "MER"));
        locators.put("MFE", heap.insert(322577, "MFE"));
        locators.put("MGE", heap.insert(459185, "MGE"));
        locators.put("MHR", heap.insert(91282, "MHR"));
        locators.put("MIA", heap.insert(493287, "MIA"));
        locators.put("MIB", heap.insert(286482, "MIB"));
        locators.put("MIV", heap.insert(546307, "MIV"));
        locators.put("MKE", heap.insert(427361, "MKE"));
        locators.put("MKL", heap.insert(421229, "MKL"));
        locators.put("MKO", heap.insert(347238, "MKO"));
        locators.put("MLB", heap.insert(495837, "MLB"));
        locators.put("MLC", heap.insert(344201, "MLC"));
        locators.put("MLT", heap.insert(621430, "MLT"));
        locators.put("MLU", heap.insert(381163, "MLU"));
        locators.put("MMV", heap.insert(63424, "MMV"));
        locators.put("MNM", heap.insert(426427, "MNM"));
        locators.put("MOB", heap.insert(416134, "MOB"));
        locators.put("MOD", heap.insert(97274, "MOD"));
        locators.put("MOT", heap.insert(288485, "MOT"));
        locators.put("MPV", heap.insert(576404, "MPV"));
        locators.put("MQT", heap.insert(425457, "MQT"));
        locators.put("MSN", heap.insert(408380, "MSN"));
        locators.put("MSP", heap.insert(363407, "MSP"));
        locators.put("MSS", heap.insert(561412, "MSS"));
        locators.put("MSY", heap.insert(399102, "MSY"));
        Assertions.assertEquals(4834, Assertions.assertDoesNotThrow(heap::getMinKey));
        locators.put("MTC", heap.insert(479359, "MTC"));
        locators.put("MUI", heap.insert(542333, "MUI"));
        locators.put("MUO", heap.insert(147379, "MUO"));
        locators.put("MWH", heap.insert(111477, "MWH"));
        locators.put("MWL", heap.insert(316161, "MWL"));
        locators.put("MXF", heap.insert(434168, "MXF"));
        locators.put("MYR", heap.insert(519184, "MYR"));
        locators.put("NBC", heap.insert(493167, "NBC"));
        locators.put("NBG", heap.insert(394106, "NBG"));
        locators.put("NCA", heap.insert(532218, "NCA"));
        locators.put("NEL", heap.insert(554335, "NEL"));
        locators.put("NFL", heap.insert(122299, "NFL"));
        locators.put("NGU", heap.insert(542250, "NGU"));
        locators.put("NHK", heap.insert(537290, "NHK"));
        locators.put("NID", heap.insert(129237, "NID"));
        locators.put("NIP", heap.insert(486135, "NIP"));
        locators.put("NJK", heap.insert(144167, "NJK"));
        locators.put("NKT", heap.insert(542206, "NKT"));
        locators.put("NKX", heap.insert(131170, "NKX"));
        locators.put("NLC", heap.insert(105256, "NLC"));
        locators.put("NMM", heap.insert(413168, "NMM"));
        locators.put("NOW", heap.insert(67488, "NOW"));
        locators.put("NPA", heap.insert(429127, "NPA"));
        locators.put("NQA", heap.insert(410231, "NQA"));
        locators.put("NQI", heap.insert(327637, "NQI"));
        locators.put("NQX", heap.insert(488147, "NQX"));
        locators.put("NSE", heap.insert(428125, "NSE"));
        locators.put("NTD", heap.insert(112201, "NTD"));
        locators.put("NTK", heap.insert(126189, "NTK"));
        locators.put("NTU", heap.insert(533255, "NTU"));
        locators.put("NUQ", heap.insert(81275, "NUQ"));
        locators.put("NUW", heap.insert(82483, "NUW"));
        locators.put("NXP", heap.insert(140210, "NXP"));
        locators.put("NXX", heap.insert(552322, "NXX"));
        locators.put("NYG", heap.insert(531287, "NYG"));
        locators.put("NZC", heap.insert(484128, "NZC"));
        locators.put("NZY", heap.insert(126165, "NZY"));
        locators.put("OAK", heap.insert(82277, "OAK"));
        locators.put("OFF", heap.insert(344341, "OFF"));
        locators.put("OGS", heap.insert(551409, "OGS"));
        locators.put("OKC", heap.insert(326238, "OKC"));
        locators.put("OLS", heap.insert(193144, "OLS"));
        locators.put("OMA", heap.insert(349354, "OMA"));
        locators.put("ONT", heap.insert(126203, "ONT"));
        locators.put("OPF", heap.insert(497337, "OPF"));
        locators.put("ORD", heap.insert(426341, "ORD"));
        locators.put("ORF", heap.insert(537252, "ORF"));
        locators.put("ORL", heap.insert(488827, "ORL"));
        locators.put("PAE", heap.insert(81461, "PAE"));
        locators.put("PAM", heap.insert(446129, "PAM"));
        locators.put("PBF", heap.insert(389209, "PBF"));
        locators.put("PBG", heap.insert(564418, "PBG"));
        locators.put("PBI", heap.insert(493567, "PBI"));
        locators.put("PDX", heap.insert(78428, "PDX"));
        locators.put("PHF", heap.insert(537259, "PHF"));
        locators.put("PHL", heap.insert(548306, "PHL"));
        locators.put("PHN", heap.insert(482361, "PHN"));
        locators.put("PHX", heap.insert(178192, "PHX"));
        locators.put("PIE", heap.insert(473777, "PIE"));
        locators.put("PIT", heap.insert(501334, "PIT"));
        locators.put("PMD", heap.insert(115213, "PMD"));
        locators.put("PNC", heap.insert(324240, "PNC"));
        locators.put("PNE", heap.insert(548320, "PNE"));
        locators.put("PNM", heap.insert(367423, "PNM"));
        locators.put("PNS", heap.insert(426127, "PNS"));
        locators.put("POB", heap.insert(508233, "POB"));
        locators.put("POE", heap.insert(369149, "POE"));
        locators.put("PQI", heap.insert(617448, "PQI"));
        locators.put("PRC", heap.insert(180208, "PRC"));
        locators.put("PSP", heap.insert(135192, "PSP"));
        locators.put("PSX", heap.insert(336837, "PSX"));
        locators.put("PUB", heap.insert(262291, "PUB"));
        locators.put("PVD", heap.insert(588344, "PVD"));
        locators.put("PWM", heap.insert(599395, "PWM"));
        locators.put("RAL", heap.insert(124191, "RAL"));
        locators.put("RBM", heap.insert(374217, "RBM"));
        locators.put("RCA", heap.insert(267402, "RCA"));
        locators.put("RDR", heap.insert(332476, "RDR"));
        locators.put("RDU", heap.insert(521231, "RDU"));
        locators.put("RIC", heap.insert(527278, "RIC"));
        locators.put("RIU", heap.insert(86282, "RIU"));
        locators.put("RIV", heap.insert(123188, "RIV"));
        locators.put("RME", heap.insert(548383, "RME"));
        locators.put("RND", heap.insert(315112, "RND"));
        locators.put("RNO", heap.insert(108317, "RNO"));
        locators.put("ROC", heap.insert(527398, "ROC"));
        locators.put("ROW", heap.insert(256182, "ROW"));
        locators.put("RSW", heap.insert(486417, "RSW"));
        locators.put("SAC", heap.insert(85285, "SAC"));
        locators.put("SAF", heap.insert(235221, "SAF"));
        locators.put("SAN", heap.insert(132172, "SAN"));
        locators.put("SAT", heap.insert(313116, "SAT"));
        locators.put("SAV", heap.insert(487162, "SAV"));
        locators.put("SBO", heap.insert(477172, "SBO"));
        locators.put("SBY", heap.insert(547282, "SBY"));
        locators.put("SCK", heap.insert(88269, "SCK"));
        locators.put("SEA", heap.insert(76471, "SEA"));
        locators.put("SEM", heap.insert(438169, "SEM"));
        locators.put("SFF", heap.insert(125467, "SFF"));
        locators.put("SFO", heap.insert(77276, "SFO"));
        locators.put("SFZ", heap.insert(592339, "SFZ"));
        locators.put("SHV", heap.insert(371162, "SHV"));
        locators.put("SJC", heap.insert(85262, "SJC"));
        locators.put("SJT", heap.insert(302140, "SJT"));
        locators.put("SKA", heap.insert(125466, "SKA"));
        locators.put("SKF", heap.insert(316103, "SKF"));
        locators.put("SKY", heap.insert(477346, "SKY"));
        locators.put("SLC", heap.insert(186333, "SLC"));
        locators.put("SMF", heap.insert(90280, "SMF"));
        locators.put("SNA", heap.insert(132196, "SNA"));
        locators.put("SPB", heap.insert(73429, "SPB"));
        locators.put("SPG", heap.insert(479677, "SPG"));
        locators.put("SPS", heap.insert(320191, "SPS"));
        locators.put("SSC", heap.insert(500195, "SSC"));
        locators.put("STL", heap.insert(398297, "STL"));
        locators.put("SUU", heap.insert(89286, "SUU"));
        locators.put("SUX", heap.insert(337370, "SUX"));
        locators.put("SVN", heap.insert(485178, "SVN"));
        locators.put("SWF", heap.insert(553353, "SWF"));
        locators.put("SYR", heap.insert(533387, "SYR"));
        locators.put("SZL", heap.insert(370283, "SZL"));
        locators.put("TBN", heap.insert(378264, "TBN"));
        locators.put("TCC", heap.insert(271220, "TCC"));
        locators.put("TCM", heap.insert(75459, "TCM"));
        locators.put("TCS", heap.insert(223183, "TCS"));
        locators.put("TEB", heap.insert(553333, "TEB"));
        locators.put("TIK", heap.insert(331235, "TIK"));
        locators.put("TLH", heap.insert(458126, "TLH"));
        Assertions.assertEquals(4834, Assertions.assertDoesNotThrow(heap::getMinKey));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("NOW"), 67487));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("GCK"), 299266));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("HIF"), 188353));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("BUR"), 122216));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("MHR"), 91281));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("BLI"), 82491));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("BFI"), 74476));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("MMV"), 63423));
        // There is a degenerate tree at level 8 with 4834 (EYW) as root
        Assertions.assertIterableEquals(List.of("{lev: 0 nodeCt: 383}","[63423 MMV]","[628454 HUL]","{lev: 1 nodeCt: 191}","(74476)","[74476 BFI]","[76463 GRF]","(616444)","[616444 CAR]","[621430 MLT]","{lev: 2 nodeCt: 95}","(82491)","(82491)","[82491 BLI]","[85280 MCC]","(89299)","[89299 BAB]","[89305 CIC]","(593343)","(593343)","[593343 FMH]","[601339 ACK]","(605412)","[605412 AUG]","[614409 BGR]","{lev: 3 nodeCt: 47}","(91281)","(91281)","(91281)","[91281 MHR]","[97274 MOD]","(99271)","[99271 MER]","[105230 BFL]","(108239)","(108239)","[108239 FAT]","[118181 LGB]","(119181)","[119181 LAX]","[119198 HHR]","(567354)","(567354)","(567354)","[567354 BDR]","[575331 FOK]","(576404)","[576404 MPV]","[578368 CEF]","(579353)","(579353)","[579353 HFD]","[580345 BDL]","(583374)","[583374 BOS]","[585377 BED]","{lev: 4 nodeCt: 23}","(122216)","(122216)","(122216)","(122216)","[122216 BUR]","[125206 EDW]","(127465)","[127465 GEG]","[142222 BYS]","(142396)","(142396)","[142396 BOI]","[148160 CXL]","(148251)","[148251 LAS]","[150255 INS]","(151172)","(151172)","(151172)","[151172 IPL]","[152254 LSV]","(157331)","[157331 ENV]","[167269 CDC]","(181492)","(181492)","[181492 CTB]","[182185 LUF]","(184458)","[184458 HLN]","[186465 GTF]","(542301)","(542301)","(542301)","(542301)","[542301 APG]","[542352 IPT]","(542381)","[542381 ART]","[544313 DOV]","(546307)","(546307)","[546307 MIV]","[547313 ILG]","(550405)","[550405 GTB]","[556325 EWR]","(558312)","(558312)","(558312)","[558312 ACY]","[561412 MSS]","(563322)","[563322 ISP]","[563362 ALB]","(563408)","(563408)","[563408 BTV]","[565353 HPN]","(566337)","[566337 JFK]","[567334 LGA]","{lev: 5 nodeCt: 11}","(188353)","(188353)","(188353)","(188353)","(188353)","[188353 HIF]","[197170 DMA]","(201156)","[201156 FHU]","[203147 DUG]","(206491)","(206491)","[206491 HVR]","[219258 FMN]","(229277)","[229277 DRO]","[232226 GNT]","(233143)","(233143)","(233143)","[233143 BIF]","[234233 ABQ]","(235370)","[235370 CPR]","[238150 ELP]","(239164)","(239164)","[239164 HMN]","[253302 BKF]","(256175)","[256175 CNM]","[256313 DEN]","(257341)","(257341)","(257341)","(257341)","[257341 CYS]","[260296 COS]","(261294)","[261294 FCS]","[265146 INK]","(267210)","(267210)","[267210 CVS]","[268160 HOB]","(270491)","[270491 ISN]","[275141 MAF]","(278251)","(278251)","(278251)","[278251 DHT]","[286482 MIB]","(288485)","[288485 MOT]","[291220 AMA]","(292185)","(292185)","[292185 LBB]","[293216 CDS]","(294837)","[294837 EGP]","[298112 DLF]","(497337)","(497337)","(497337)","(497337)","(497337)","[497337 OPF]","[500195 SSC]","(501334)","[501334 PIT]","[508233 POB]","(519184)","(519184)","[519184 MYR]","[521231 RDU]","(527278)","[527278 RIC]","[527398 ROC]","(531287)","(531287)","(531287)","[531287 NYG]","[532218 NCA]","(533255)","[533255 NTU]","[533387 SYR]","(537252)","(537252)","[537252 ORF]","[537259 PHF]","(537290)","[537290 NHK]","[542206 NKT]","(542250)","(542250)","(542250)","(542250)","[542250 NGU]","[542333 MUI]","(547282)","[547282 SBY]","[548306 PHL]","(548320)","(548320)","[548320 PNE]","[548383 RME]","(551409)","[551409 OGS]","[552322 NXX]","(553333)","(553333)","(553333)","[553333 TEB]","[553353 SWF]","(554335)","[554335 NEL]","[564418 PBG]","(588344)","(588344)","[588344 PVD]","[592339 SFZ]","(599395)","[599395 PWM]","[617448 PQI]","{lev: 6 nodeCt: 5}","(299266)","(299266)","(299266)","(299266)","(299266)","(299266)","[299266 GCK]","[301104 DRT]","(303174)","[303174 DYS]","[304727 LRD]","(306907)","(306907)","[306907 COT]","[308217 HBR]","(309202)","[309202 LTS]","[309248 GAG]","(311160)","(311160)","(311160)","[311160 ABI]","[313411 HON]","(313627)","[313627 ALI]","[322208 FSI]","(322577)","(322577)","[322577 MFE]","[323151 GRK]","(323248)","[323248 END]","[324268 ICT]","(324274)","(324274)","(324274)","(324274)","[324274 IAB]","[324468 GFK]","(324577)","[324577 HRL]","[327126 AUS]","(327317)","(327317)","[327317 BRO]","[328209 ADM]","(328617)","[328617 CRP]","[329151 HLR]","(330148)","(330148)","(330148)","[330148 ACT]","[331154 CNW]","(332163)","[332163 FTW]","[332168 DFW]","(333137)","(333137)","[333137 CFD]","[333192 GVT]","(335316)","[335316 FRI]","[337136 CLL]","(342164)","(342164)","(342164)","(342164)","(342164)","[342164 DAL]","[342336 LNK]","(344100)","[344100 IAH]","[344201 MLC]","(345137)","(345137)","[345137 CXO]","[347238 MKO]","(348103)","[348103 HOU]","[348297 FOE]","(349115)","(349115)","(349115)","[349115 EFD]","[355371 FOD]","(356300)","[356300 FLV]","[356309 MCI]","(358176)","(358176)","[358176 GGG]","[360226 FSM]","(360252)","[360252 FYV]","[360280 GVW]","(360480)","(360480)","(360480)","(360480)","[360480 BDE]","[361148 LFK]","(362107)","[362107 GLS]","[362112 BPT]","(363407)","(363407)","[363407 MSP]","[365120 LCH]","(365166)","[365166 BAD]","[366135 DRI]","(366357)","(366357)","(366357)","[366357 DSM]","[369497 INL]","(370254)","[370254 HRO]","[376210 LIT]","(377155)","(377155)","[377155 ESF]","[378154 AEX]","(378283)","[378283 COU]","[378461 HIB]","(380210)","(380210)","(380210)","(380210)","(380210)","(380210)","[380210 LRF]","[380454 DLH]","(381163)","[381163 MLU]","[382179 ELD]","(384132)","(384132)","[384132 LFT]","[385124 ARA]","(391119)","[391119 BTR]","[394196 GWO]","(398172)","(398172)","(398172)","[398172 JAN]","[398232 JBR]","(399102)","[399102 MSY]","[405229 MEM]","(405293)","(405293)","[405293 BLV]","[408380 MSN]","(409236)","[409236 BYH]","[413128 BFM]","(414352)","(414352)","(414352)","(414352)","[414352 DPA]","[416134 MOB]","(418129)","[418129 BIX]","[421196 CBM]","(421229)","(421229)","[421229 MKL]","[422404 GRB]","(424241)","[424241 HOP]","[424341 IKK]","(425353)","(425353)","(425353)","[425353 MDW]","[425457 MQT]","(426315)","[426315 HUF]","[426427 MNM]","(427361)","(427361)","[427361 MKE]","[436121 HRT]","(439135)","[439135 CEW]","[439193 BHM]","(439211)","(439211)","(439211)","(439211)","(439211)","[439211 HUA]","[439257 BNA]","(439313)","[439313 IND]","[440321 GUS]","(443259)","(443259)","[443259 FTK]","[444294 LOU]","(445157)","[445157 DHN]","[445233 CHA]","(446188)","(446188)","(446188)","[446188 ANB]","[450377 GRR]","(455417)","[455417 HTL]","[457302 DAY]","(457305)","(457305)","[457305 CVG]","[459159 LSF]","(459185)","[459185 MGE]","[459373 LAN]","(460302)","(460302)","(460302)","(460302)","[460302 LUK]","[461304 FFO]","(462189)","[462189 ATL]","[464364 DET]","(465363)","(465363)","[465363 DTW]","[468171 MCN]","(473312)","[473312 CMH]","[473747 MCF]","(476114)","(476114)","(476114)","[476114 GNV]","[481206 AND]","(481311)","[481311 LCK]","[483188 AGS]","(483344)","(483344)","[483344 AKR]","[483567 FMY]","(485185)","[485185 CAE]","[485223 HKY]","{lev: 7 nodeCt: 2}","(67487)","(67487)","(67487)","(67487)","(67487)","(67487)","(67487)","[67487 NOW]","[73429 SPB]","(75459)","[75459 TCM]","[76471 SEA]","(77276)","(77276)","[77276 SFO]","[78428 PDX]","(81275)","[81275 NUQ]","[81461 PAE]","(82277)","(82277)","(82277)","[82277 OAK]","[82483 NUW]","(85262)","[85262 SJC]","[85285 SAC]","(86282)","(86282)","[86282 RIU]","[88269 SCK]","(89286)","[89286 SUU]","[90280 SMF]","(105256)","(105256)","(105256)","(105256)","[105256 NLC]","[108317 RNO]","(111477)","[111477 MWH]","[112201 NTD]","(115213)","(115213)","[115213 PMD]","[122299 NFL]","(123188)","[123188 RIV]","[124191 RAL]","(125466)","(125466)","(125466)","[125466 SKA]","[125467 SFF]","(126165)","[126165 NZY]","[126189 NTK]","(126203)","(126203)","[126203 ONT]","[129237 NID]","(131170)","[131170 NKX]","[132172 SAN]","(132196)","(132196)","(132196)","(132196)","(132196)","[132196 SNA]","[135192 PSP]","(140210)","[140210 NXP]","[144167 NJK]","(147379)","(147379)","[147379 MUO]","[178192 PHX]","(180208)","[180208 PRC]","[186333 SLC]","(193144)","(193144)","(193144)","[193144 OLS]","[223183 TCS]","(235221)","[235221 SAF]","[256182 ROW]","(262291)","(262291)","[262291 PUB]","[267402 RCA]","(271220)","[271220 TCC]","[302140 SJT]","(313116)","(313116)","(313116)","(313116)","[313116 SAT]","[315112 RND]","(316103)","[316103 SKF]","[316161 MWL]","(320191)","(320191)","[320191 SPS]","[324240 PNC]","(326238)","[326238 OKC]","[327637 NQI]","(331235)","(331235)","(331235)","[331235 TIK]","[332476 RDR]","(336837)","[336837 PSX]","[337370 SUX]","(344341)","(344341)","[344341 OFF]","[349354 OMA]","(367423)","[367423 PNM]","[369149 POE]","(370283)","(370283)","(370283)","(370283)","(370283)","(370283)","[370283 SZL]","[371162 SHV]","(374217)","[374217 RBM]","[378264 TBN]","(389209)","(389209)","[389209 PBF]","[394106 NBG]","(398297)","[398297 STL]","[410231 NQA]","(413168)","(413168)","(413168)","[413168 NMM]","[426127 PNS]","(426341)","[426341 ORD]","[428125 NSE]","(429127)","(429127)","[429127 NPA]","[434168 MXF]","(438169)","[438169 SEM]","[446129 PAM]","(458126)","(458126)","(458126)","(458126)","[458126 TLH]","[473777 PIE]","(477172)","[477172 SBO]","[477346 SKY]","(479359)","(479359)","[479359 MTC]","[479677 SPG]","(482361)","[482361 PHN]","[484128 NZC]","(485178)","(485178)","(485178)","[485178 SVN]","[486135 NIP]","(486417)","[486417 RSW]","[487162 SAV]","(488147)","(488147)","[488147 NQX]","[488827 ORL]","(493167)","[493167 NBC]","[493567 PBI]","(488137)","(488137)","(488137)","(488137)","(488137)","[488137 JAX]","[488343 CLE]","(489156)","[489156 LHW]","[491967 MCO]","(493249)","(493249)","[493249 INT]","[493287 MIA]","(493497)","[493497 LNA]","[494160 CHS]","(494228)","(494228)","(494228)","[494228 CLT]","[494537 HWO]","(495497)","[495497 BCT]","[495837 MLB]","(497237)","(497237)","[497237 HST]","[497467 FLL]","(500507)","[500507 FXE]","[500877 COF]","(504204)","(504204)","(504204)","(504204)","[504204 FLO]","[512286 EKN]","(513394)","[513394 IAG]","[516322 AOO]","(518370)","(518370)","[518370 BUF]","[524292 IAD]","(525296)","[525296 DCA]","[526221 GSB]","(526231)","(526231)","(526231)","[526231 EWN]","[532213 ILM]","(536252)","[536252 ECG]","[537270 LFI]","(537272)","(537272)","[537272 FAF]","[538302 BWI]","(538320)","[538320 MDT]","[539282 ADW]","{lev: 8 nodeCt: 1}","(4834)","(4834)","(4834)","(4834)","(4834)","(4834)","(4834)","(4834)","[4834 EYW]","[null]","[null]","[null]","[null]","[null]","[null]","[null]","[null]"), heap.listHeap());
        Assertions.assertEquals(383, heap.size());
        Assertions.assertEquals("EYW", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertEquals("MMV", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertEquals("NOW", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertEquals("SPB", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertEquals("BFI", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertEquals("TCM", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertEquals("GRF", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertEquals("SEA", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertEquals("SFO", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertEquals("PDX", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertEquals("NUQ", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("IPT"), 0));
        Assertions.assertEquals("IPT", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("DOV"), 0));
        Assertions.assertEquals("DOV", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("ILG"), 0));
        Assertions.assertEquals("ILG", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("EWR"), 0));
        Assertions.assertEquals("EWR", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("MSS"), 0));
        Assertions.assertEquals("MSS", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("ALB"), 0));
        Assertions.assertEquals("ALB", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("HPN"), 0));
        Assertions.assertEquals("HPN", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("LGA"), 0));
        Assertions.assertEquals("LGA", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("SSC"), 0));
        Assertions.assertEquals("SSC", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("POB"), 0));
        Assertions.assertEquals("POB", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("RDU"), 0));
        Assertions.assertEquals("RDU", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("ROC"), 0));
        Assertions.assertEquals("ROC", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("NCA"), 0));
        Assertions.assertEquals("NCA", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("SYR"), 0));
        Assertions.assertEquals("SYR", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("PHF"), 0));
        Assertions.assertEquals("PHF", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("NKT"), 0));
        Assertions.assertEquals("NKT", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("MUI"), 0));
        Assertions.assertEquals("MUI", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("PHL"), 0));
        Assertions.assertEquals("PHL", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("RME"), 0));
        Assertions.assertEquals("RME", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("NXX"), 0));
        Assertions.assertEquals("NXX", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("SWF"), 0));
        Assertions.assertEquals("SWF", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("PBG"), 0));
        Assertions.assertEquals("PBG", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("SFZ"), 0));
        Assertions.assertEquals("SFZ", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("PQI"), 0));
        Assertions.assertEquals("PQI", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("DLH"), 0));
        Assertions.assertEquals("DLH", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("ELD"), 0));
        Assertions.assertEquals("ELD", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("ARA"), 0));
        Assertions.assertEquals("ARA", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("GWO"), 0));
        Assertions.assertEquals("GWO", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("JBR"), 0));
        Assertions.assertEquals("JBR", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("MEM"), 0));
        Assertions.assertEquals("MEM", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("MSN"), 0));
        Assertions.assertEquals("MSN", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("BFM"), 0));
        Assertions.assertEquals("BFM", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("MOB"), 0));
        Assertions.assertEquals("MOB", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("CBM"), 0));
        Assertions.assertEquals("CBM", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("GRB"), 0));
        Assertions.assertEquals("GRB", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("IKK"), 0));
        Assertions.assertEquals("IKK", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("MQT"), 0));
        Assertions.assertEquals("MQT", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("MNM"), 0));
        Assertions.assertEquals("MNM", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("HRT"), 0));
        Assertions.assertEquals("HRT", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("BHM"), 0));
        Assertions.assertEquals("BHM", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("BNA"), 0));
        Assertions.assertEquals("BNA", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("GUS"), 0));
        Assertions.assertEquals("GUS", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("LOU"), 0));
        Assertions.assertEquals("LOU", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("CHA"), 0));
        Assertions.assertEquals("CHA", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("GRR"), 0));
        Assertions.assertEquals("GRR", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("DAY"), 0));
        Assertions.assertEquals("DAY", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("LSF"), 0));
        Assertions.assertEquals("LSF", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("LAN"), 0));
        Assertions.assertEquals("LAN", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("FFO"), 0));
        Assertions.assertEquals("FFO", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("DET"), 0));
        Assertions.assertEquals("DET", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("MCN"), 0));
        Assertions.assertEquals("MCN", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("MCF"), 0));
        Assertions.assertEquals("MCF", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("AND"), 0));
        Assertions.assertEquals("AND", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("AGS"), 0));
        Assertions.assertEquals("AGS", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("FMY"), 0));
        Assertions.assertEquals("FMY", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("HKY"), 0));
        Assertions.assertEquals("HKY", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("PAE"), 0));
        Assertions.assertEquals("PAE", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("MLT"), 0));
        Assertions.assertEquals("MLT", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("MCC"), 0));
        Assertions.assertEquals("MCC", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("CIC"), 0));
        Assertions.assertEquals("CIC", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("NUW"), 0));
        Assertions.assertEquals("NUW", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("SAC"), 0));
        Assertions.assertEquals("SAC", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("SCK"), 0));
        Assertions.assertEquals("SCK", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("SMF"), 0));
        Assertions.assertEquals("SMF", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("RNO"), 0));
        Assertions.assertEquals("RNO", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("NTD"), 0));
        Assertions.assertEquals("NTD", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("NFL"), 0));
        Assertions.assertEquals("NFL", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("RAL"), 0));
        Assertions.assertEquals("RAL", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("SFF"), 0));
        Assertions.assertEquals("SFF", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("NTK"), 0));
        Assertions.assertEquals("NTK", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("NID"), 0));
        Assertions.assertEquals("NID", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("SAN"), 0));
        Assertions.assertEquals("SAN", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("PSP"), 0));
        Assertions.assertEquals("PSP", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("NJK"), 0));
        Assertions.assertEquals("NJK", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("PHX"), 0));
        Assertions.assertEquals("PHX", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("SLC"), 0));
        Assertions.assertEquals("SLC", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("TCS"), 0));
        Assertions.assertEquals("TCS", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("ROW"), 0));
        Assertions.assertEquals("ROW", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("RCA"), 0));
        Assertions.assertEquals("RCA", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("SJT"), 0));
        Assertions.assertEquals("SJT", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("RND"), 0));
        Assertions.assertEquals("RND", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("MWL"), 0));
        Assertions.assertEquals("MWL", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("PNC"), 0));
        Assertions.assertEquals("PNC", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("NQI"), 0));
        Assertions.assertEquals("NQI", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("RDR"), 0));
        Assertions.assertEquals("RDR", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("SUX"), 0));
        Assertions.assertEquals("SUX", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("OMA"), 0));
        Assertions.assertEquals("OMA", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("POE"), 0));
        Assertions.assertEquals("POE", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("SHV"), 0));
        Assertions.assertEquals("SHV", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("TBN"), 0));
        Assertions.assertEquals("TBN", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("NBG"), 0));
        Assertions.assertEquals("NBG", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("NQA"), 0));
        Assertions.assertEquals("NQA", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("PNS"), 0));
        Assertions.assertEquals("PNS", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("NSE"), 0));
        Assertions.assertEquals("NSE", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("MXF"), 0));
        Assertions.assertEquals("MXF", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("PAM"), 0));
        Assertions.assertEquals("PAM", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("PIE"), 0));
        Assertions.assertEquals("PIE", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("SKY"), 0));
        Assertions.assertEquals("SKY", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("SPG"), 0));
        Assertions.assertEquals("SPG", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("NZC"), 0));
        Assertions.assertEquals("NZC", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("NIP"), 0));
        Assertions.assertEquals("NIP", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("SAV"), 0));
        Assertions.assertEquals("SAV", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("ORL"), 0));
        Assertions.assertEquals("ORL", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("PBI"), 0));
        Assertions.assertEquals("PBI", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("CLE"), 0));
        Assertions.assertEquals("CLE", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("MCO"), 0));
        Assertions.assertEquals("MCO", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("MIA"), 0));
        Assertions.assertEquals("MIA", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("CHS"), 0));
        Assertions.assertEquals("CHS", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("HWO"), 0));
        Assertions.assertEquals("HWO", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("MLB"), 0));
        Assertions.assertEquals("MLB", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("FLL"), 0));
        Assertions.assertEquals("FLL", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("COF"), 0));
        Assertions.assertEquals("COF", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("EKN"), 0));
        Assertions.assertEquals("EKN", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("AOO"), 0));
        Assertions.assertEquals("AOO", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("IAD"), 0));
        Assertions.assertEquals("IAD", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("GSB"), 0));
        Assertions.assertEquals("GSB", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("ILM"), 0));
        Assertions.assertEquals("ILM", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("LFI"), 0));
        Assertions.assertEquals("LFI", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("BWI"), 0));
        Assertions.assertEquals("BWI", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("ADW"), 0));
        Assertions.assertEquals("ADW", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("MOD"), 0));
        Assertions.assertEquals("MOD", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("BFL"), 0));
        Assertions.assertEquals("BFL", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("LGB"), 0));
        Assertions.assertEquals("LGB", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("HHR"), 0));
        Assertions.assertEquals("HHR", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("OGS"), 0));
        Assertions.assertEquals("OGS", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("TEB"), 0));
        Assertions.assertEquals("TEB", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("NEL"), 0));
        Assertions.assertEquals("NEL", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("ISP"), 0));
        Assertions.assertEquals("ISP", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("BTV"), 0));
        Assertions.assertEquals("BTV", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("JFK"), 0));
        Assertions.assertEquals("JFK", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("FOK"), 0));
        Assertions.assertEquals("FOK", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("MPV"), 0));
        Assertions.assertEquals("MPV", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("CEF"), 0));
        Assertions.assertEquals("CEF", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("BDL"), 0));
        Assertions.assertEquals("BDL", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("BOS"), 0));
        // The following extract-min generates a quake to level 0
        Assertions.assertEquals("BOS", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertIterableEquals(List.of("{lev: 0 nodeCt: 237}","[82277 OAK]","[82491 BLI]","[85262 SJC]","[86282 RIU]","[89286 SUU]","[89299 BAB]","[91281 MHR]","[99271 MER]","[105256 NLC]","[108239 FAT]","[111477 MWH]","[115213 PMD]","[119181 LAX]","[122216 BUR]","[123188 RIV]","[125206 EDW]","[125466 SKA]","[126165 NZY]","[126203 ONT]","[127465 GEG]","[131170 NKX]","[132196 SNA]","[140210 NXP]","[142222 BYS]","[142396 BOI]","[147379 MUO]","[148160 CXL]","[148251 LAS]","[150255 INS]","[151172 IPL]","[152254 LSV]","[157331 ENV]","[167269 CDC]","[180208 PRC]","[181492 CTB]","[182185 LUF]","[184458 HLN]","[186465 GTF]","[188353 HIF]","[193144 OLS]","[197170 DMA]","[201156 FHU]","[203147 DUG]","[206491 HVR]","[219258 FMN]","[229277 DRO]","[232226 GNT]","[233143 BIF]","[234233 ABQ]","[235221 SAF]","[235370 CPR]","[238150 ELP]","[239164 HMN]","[253302 BKF]","[256175 CNM]","[256313 DEN]","[257341 CYS]","[260296 COS]","[261294 FCS]","[262291 PUB]","[265146 INK]","[267210 CVS]","[268160 HOB]","[270491 ISN]","[271220 TCC]","[275141 MAF]","[278251 DHT]","[286482 MIB]","[288485 MOT]","[291220 AMA]","[292185 LBB]","[293216 CDS]","[294837 EGP]","[298112 DLF]","[299266 GCK]","[301104 DRT]","[303174 DYS]","[304727 LRD]","[306907 COT]","[308217 HBR]","[309202 LTS]","[309248 GAG]","[311160 ABI]","[313116 SAT]","[313411 HON]","[313627 ALI]","[316103 SKF]","[320191 SPS]","[322208 FSI]","[322577 MFE]","[323151 GRK]","[323248 END]","[324268 ICT]","[324274 IAB]","[324468 GFK]","[324577 HRL]","[326238 OKC]","[327126 AUS]","[327317 BRO]","[328209 ADM]","[328617 CRP]","[329151 HLR]","[330148 ACT]","[331154 CNW]","[331235 TIK]","[332163 FTW]","[332168 DFW]","[333137 CFD]","[333192 GVT]","[335316 FRI]","[336837 PSX]","[337136 CLL]","[342164 DAL]","[342336 LNK]","[344100 IAH]","[344201 MLC]","[344341 OFF]","[345137 CXO]","[347238 MKO]","[348103 HOU]","[348297 FOE]","[349115 EFD]","[355371 FOD]","[356300 FLV]","[356309 MCI]","[358176 GGG]","[360226 FSM]","[360252 FYV]","[360280 GVW]","[360480 BDE]","[361148 LFK]","[362107 GLS]","[362112 BPT]","[363407 MSP]","[365120 LCH]","[365166 BAD]","[366135 DRI]","[366357 DSM]","[367423 PNM]","[369497 INL]","[370254 HRO]","[370283 SZL]","[374217 RBM]","[376210 LIT]","[377155 ESF]","[378154 AEX]","[378283 COU]","[378461 HIB]","[380210 LRF]","[381163 MLU]","[384132 LFT]","[389209 PBF]","[391119 BTR]","[398172 JAN]","[398297 STL]","[399102 MSY]","[405293 BLV]","[409236 BYH]","[413168 NMM]","[414352 DPA]","[418129 BIX]","[421229 MKL]","[424241 HOP]","[425353 MDW]","[426315 HUF]","[426341 ORD]","[427361 MKE]","[429127 NPA]","[438169 SEM]","[439135 CEW]","[439211 HUA]","[439313 IND]","[443259 FTK]","[445157 DHN]","[446188 ANB]","[455417 HTL]","[457305 CVG]","[458126 TLH]","[459185 MGE]","[460302 LUK]","[462189 ATL]","[465363 DTW]","[473312 CMH]","[476114 GNV]","[477172 SBO]","[479359 MTC]","[481311 LCK]","[482361 PHN]","[483344 AKR]","[485178 SVN]","[485185 CAE]","[486417 RSW]","[488137 JAX]","[488147 NQX]","[489156 LHW]","[493167 NBC]","[493249 INT]","[493497 LNA]","[494228 CLT]","[495497 BCT]","[497237 HST]","[497337 OPF]","[500507 FXE]","[501334 PIT]","[504204 FLO]","[513394 IAG]","[518370 BUF]","[519184 MYR]","[525296 DCA]","[526231 EWN]","[527278 RIC]","[531287 NYG]","[533255 NTU]","[536252 ECG]","[537252 ORF]","[537272 FAF]","[537290 NHK]","[538320 MDT]","[542250 NGU]","[542301 APG]","[542381 ART]","[546307 MIV]","[547282 SBY]","[548320 PNE]","[550405 GTB]","[558312 ACY]","[567354 BDR]","[579353 HFD]","[585377 BED]","[588344 PVD]","[593343 FMH]","[599395 PWM]","[601339 ACK]","[605412 AUG]","[614409 BGR]","[616444 CAR]","[628454 HUL]"), heap.listHeap());
        Assertions.assertEquals(237, heap.size());
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("BED"), 0));
        Assertions.assertEquals("BED", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("NQX"), 0));
        Assertions.assertEquals("NQX", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("LHW"), 0));
        Assertions.assertEquals("LHW", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("NBC"), 0));
        Assertions.assertEquals("NBC", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("LNA"), 0));
        Assertions.assertEquals("LNA", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("CLT"), 0));
        Assertions.assertEquals("CLT", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("BCT"), 0));
        Assertions.assertEquals("BCT", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("OPF"), 0));
        Assertions.assertEquals("OPF", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("FXE"), 0));
        Assertions.assertEquals("FXE", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("PIT"), 0));
        Assertions.assertEquals("PIT", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("IAG"), 0));
        Assertions.assertEquals("IAG", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("BUF"), 0));
        Assertions.assertEquals("BUF", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("MYR"), 0));
        Assertions.assertEquals("MYR", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("EWN"), 0));
        Assertions.assertEquals("EWN", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("RIC"), 0));
        Assertions.assertEquals("RIC", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("NYG"), 0));
        Assertions.assertEquals("NYG", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("ECG"), 0));
        Assertions.assertEquals("ECG", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("ORF"), 0));
        Assertions.assertEquals("ORF", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("FAF"), 0));
        Assertions.assertEquals("FAF", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("MDT"), 0));
        Assertions.assertEquals("MDT", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("NGU"), 0));
        Assertions.assertEquals("NGU", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("APG"), 0));
        Assertions.assertEquals("APG", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("MIV"), 0));
        Assertions.assertEquals("MIV", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("SBY"), 0));
        Assertions.assertEquals("SBY", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("PNE"), 0));
        Assertions.assertEquals("PNE", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("BDE"), 0));
        Assertions.assertEquals("BDE", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("LFK"), 0));
        Assertions.assertEquals("LFK", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("GLS"), 0));
        Assertions.assertEquals("GLS", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("MSP"), 0));
        Assertions.assertEquals("MSP", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("LCH"), 0));
        Assertions.assertEquals("LCH", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("BAD"), 0));
        Assertions.assertEquals("BAD", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("DSM"), 0));
        Assertions.assertEquals("DSM", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("PNM"), 0));
        Assertions.assertEquals("PNM", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("INL"), 0));
        Assertions.assertEquals("INL", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("SZL"), 0));
        Assertions.assertEquals("SZL", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("RBM"), 0));
        Assertions.assertEquals("RBM", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("LIT"), 0));
        Assertions.assertEquals("LIT", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("AEX"), 0));
        Assertions.assertEquals("AEX", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("COU"), 0));
        Assertions.assertEquals("COU", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("HIB"), 0));
        Assertions.assertEquals("HIB", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("MLU"), 0));
        Assertions.assertEquals("MLU", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("LFT"), 0));
        Assertions.assertEquals("LFT", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("PBF"), 0));
        Assertions.assertEquals("PBF", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("JAN"), 0));
        Assertions.assertEquals("JAN", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("STL"), 0));
        Assertions.assertEquals("STL", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("MSY"), 0));
        Assertions.assertEquals("MSY", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("BYH"), 0));
        Assertions.assertEquals("BYH", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("NMM"), 0));
        Assertions.assertEquals("NMM", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("DPA"), 0));
        Assertions.assertEquals("DPA", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("MKL"), 0));
        Assertions.assertEquals("MKL", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("HOP"), 0));
        Assertions.assertEquals("HOP", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("MDW"), 0));
        Assertions.assertEquals("MDW", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("ORD"), 0));
        Assertions.assertEquals("ORD", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("MKE"), 0));
        Assertions.assertEquals("MKE", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("NPA"), 0));
        Assertions.assertEquals("NPA", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("CEW"), 0));
        Assertions.assertEquals("CEW", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("HUA"), 0));
        Assertions.assertEquals("HUA", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("IND"), 0));
        Assertions.assertEquals("IND", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("DHN"), 0));
        Assertions.assertEquals("DHN", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("ANB"), 0));
        Assertions.assertEquals("ANB", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("HTL"), 0));
        Assertions.assertEquals("HTL", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("TLH"), 0));
        Assertions.assertEquals("TLH", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("MGE"), 0));
        Assertions.assertEquals("MGE", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("LUK"), 0));
        Assertions.assertEquals("LUK", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("DTW"), 0));
        Assertions.assertEquals("DTW", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("CMH"), 0));
        Assertions.assertEquals("CMH", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("GNV"), 0));
        Assertions.assertEquals("GNV", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("MTC"), 0));
        Assertions.assertEquals("MTC", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("LCK"), 0));
        Assertions.assertEquals("LCK", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("PHN"), 0));
        Assertions.assertEquals("PHN", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("SVN"), 0));
        Assertions.assertEquals("SVN", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("CAE"), 0));
        Assertions.assertEquals("CAE", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("RSW"), 0));
        Assertions.assertEquals("RSW", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("BLI"), 0));
        Assertions.assertEquals("BLI", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("SJC"), 0));
        Assertions.assertEquals("SJC", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("RIU"), 0));
        Assertions.assertEquals("RIU", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("BAB"), 0));
        Assertions.assertEquals("BAB", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("MHR"), 0));
        Assertions.assertEquals("MHR", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("MER"), 0));
        Assertions.assertEquals("MER", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("FAT"), 0));
        Assertions.assertEquals("FAT", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("MWH"), 0));
        Assertions.assertEquals("MWH", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("PMD"), 0));
        Assertions.assertEquals("PMD", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("BUR"), 0));
        Assertions.assertEquals("BUR", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("RIV"), 0));
        Assertions.assertEquals("RIV", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("EDW"), 0));
        Assertions.assertEquals("EDW", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("NZY"), 0));
        Assertions.assertEquals("NZY", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("ONT"), 0));
        Assertions.assertEquals("ONT", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("GEG"), 0));
        Assertions.assertEquals("GEG", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("SNA"), 0));
        Assertions.assertEquals("SNA", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("NXP"), 0));
        Assertions.assertEquals("NXP", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("BYS"), 0));
        Assertions.assertEquals("BYS", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("MUO"), 0));
        Assertions.assertEquals("MUO", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("CXL"), 0));
        Assertions.assertEquals("CXL", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("LAS"), 0));
        Assertions.assertEquals("LAS", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("IPL"), 0));
        Assertions.assertEquals("IPL", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("LSV"), 0));
        Assertions.assertEquals("LSV", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("ENV"), 0));
        Assertions.assertEquals("ENV", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("PRC"), 0));
        Assertions.assertEquals("PRC", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("CTB"), 0));
        Assertions.assertEquals("CTB", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("LUF"), 0));
        Assertions.assertEquals("LUF", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("GTF"), 0));
        Assertions.assertEquals("GTF", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("HIF"), 0));
        Assertions.assertEquals("HIF", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("OLS"), 0));
        Assertions.assertEquals("OLS", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("FHU"), 0));
        Assertions.assertEquals("FHU", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("DUG"), 0));
        Assertions.assertEquals("DUG", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("HVR"), 0));
        Assertions.assertEquals("HVR", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("DRO"), 0));
        Assertions.assertEquals("DRO", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("GNT"), 0));
        Assertions.assertEquals("GNT", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("BIF"), 0));
        Assertions.assertEquals("BIF", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("SAF"), 0));
        Assertions.assertEquals("SAF", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("CPR"), 0));
        Assertions.assertEquals("CPR", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("ELP"), 0));
        Assertions.assertEquals("ELP", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("BKF"), 0));
        Assertions.assertEquals("BKF", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("CNM"), 0));
        Assertions.assertEquals("CNM", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("JAX"), 0));
        Assertions.assertEquals("JAX", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("HST"), 0));
        Assertions.assertEquals("HST", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("DCA"), 0));
        Assertions.assertEquals("DCA", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("NHK"), 0));
        Assertions.assertEquals("NHK", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("GTB"), 0));
        Assertions.assertEquals("GTB", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("BDR"), 0));
        Assertions.assertEquals("BDR", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("FMH"), 0));
        Assertions.assertEquals("FMH", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("AUG"), 0));
        Assertions.assertEquals("AUG", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("HUL"), 0));
        Assertions.assertEquals("HUL", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("NLC"), 0));
        Assertions.assertEquals("NLC", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("SKA"), 0));
        Assertions.assertEquals("SKA", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("BOI"), 0));
        Assertions.assertEquals("BOI", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("CDC"), 0));
        Assertions.assertEquals("CDC", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("DMA"), 0));
        Assertions.assertEquals("DMA", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("CYS"), 0));
        Assertions.assertEquals("CYS", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("COS"), 0));
        Assertions.assertEquals("COS", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("CVS"), 0));
        Assertions.assertEquals("CVS", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("ISN"), 0));
        Assertions.assertEquals("ISN", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("MAF"), 0));
        Assertions.assertEquals("MAF", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("MIB"), 0));
        Assertions.assertEquals("MIB", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("AMA"), 0));
        Assertions.assertEquals("AMA", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("CDS"), 0));
        Assertions.assertEquals("CDS", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("EGP"), 0));
        Assertions.assertEquals("EGP", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("DLF"), 0));
        Assertions.assertEquals("DLF", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("DRT"), 0));
        Assertions.assertEquals("DRT", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("LRD"), 0));
        Assertions.assertEquals("LRD", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("HBR"), 0));
        Assertions.assertEquals("HBR", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("GAG"), 0));
        Assertions.assertEquals("GAG", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("SAT"), 0));
        Assertions.assertEquals("SAT", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("ALI"), 0));
        Assertions.assertEquals("ALI", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("FLO"), 0));
        Assertions.assertEquals("FLO", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("ART"), 0));
        Assertions.assertEquals("ART", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("HFD"), 0));
        Assertions.assertEquals("HFD", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("PWM"), 0));
        Assertions.assertEquals("PWM", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("NTU"), 0));
        Assertions.assertEquals("NTU", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("PVD"), 0));
        Assertions.assertEquals("PVD", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("ACY"), 0));
        Assertions.assertEquals("ACY", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("BPT"), 0));
        Assertions.assertEquals("BPT", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("HRO"), 0));
        Assertions.assertEquals("HRO", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("LRF"), 0));
        Assertions.assertEquals("LRF", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("BLV"), 0));
        Assertions.assertEquals("BLV", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("HUF"), 0));
        Assertions.assertEquals("HUF", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("FTK"), 0));
        Assertions.assertEquals("FTK", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("ATL"), 0));
        Assertions.assertEquals("ATL", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("AKR"), 0));
        Assertions.assertEquals("AKR", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("DRI"), 0));
        Assertions.assertEquals("DRI", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("BTR"), 0));
        Assertions.assertEquals("BTR", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("SEM"), 0));
        Assertions.assertEquals("SEM", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("SBO"), 0));
        // The following extract-min generates a quake to level 3
        Assertions.assertEquals("SBO", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertIterableEquals(List.of("{lev: 0 nodeCt: 74}","{lev: 1 nodeCt: 51}","{lev: 2 nodeCt: 33}","(601339)","(601339)","[601339 ACK]","[614409 BGR]","(616444)","[616444 CAR]","[null]","{lev: 3 nodeCt: 19}","(82277)","(82277)","(82277)","[82277 OAK]","[null]","[null]","(89286)","(89286)","[89286 SUU]","[null]","[null]","(119181)","(119181)","(119181)","[119181 LAX]","[null]","[null]","(131170)","(131170)","[131170 NKX]","[null]","[null]","(150255)","(150255)","(150255)","[150255 INS]","[null]","[null]","(184458)","(184458)","[184458 HLN]","[null]","[null]","(219258)","(219258)","(219258)","[219258 FMN]","[null]","[null]","(265146)","(265146)","[265146 INK]","[null]","(268160)","[268160 HOB]","[null]","(234233)","(234233)","(234233)","[234233 ABQ]","[null]","[null]","(239164)","(239164)","[239164 HMN]","[null]","[null]","(256313)","(256313)","(256313)","[256313 DEN]","[null]","[null]","[null]","(261294)","(261294)","(261294)","[261294 FCS]","[262291 PUB]","(299266)","[299266 GCK]","[null]","(303174)","(303174)","[303174 DYS]","[null]","(306907)","[306907 COT]","[null]","(271220)","(271220)","(271220)","[271220 TCC]","[null]","(278251)","[278251 DHT]","[null]","(288485)","(288485)","[288485 MOT]","[null]","(292185)","[292185 LBB]","[null]","(309202)","(309202)","(309202)","[309202 LTS]","[null]","(311160)","[311160 ABI]","[null]","(313411)","(313411)","[313411 HON]","[null]","(316103)","[316103 SKF]","[320191 SPS]","(322208)","(322208)","(322208)","[322208 FSI]","[322577 MFE]","(323151)","[323151 GRK]","[323248 END]","(324268)","(324268)","[324268 ICT]","[324274 IAB]","(324468)","[324468 GFK]","[324577 HRL]","(326238)","(326238)","(326238)","[326238 OKC]","[327126 AUS]","(327317)","[327317 BRO]","[328209 ADM]","(328617)","(328617)","[328617 CRP]","[329151 HLR]","(330148)","[330148 ACT]","[331154 CNW]","(331235)","(331235)","(331235)","[331235 TIK]","[332163 FTW]","(332168)","[332168 DFW]","[333137 CFD]","(333192)","(333192)","[333192 GVT]","[335316 FRI]","(336837)","[336837 PSX]","[337136 CLL]","(342164)","(342164)","(342164)","[342164 DAL]","[342336 LNK]","(344100)","[344100 IAH]","[344201 MLC]","(344341)","(344341)","[344341 OFF]","[345137 CXO]","(347238)","[347238 MKO]","[348103 HOU]","(348297)","(348297)","(348297)","[348297 FOE]","[349115 EFD]","(355371)","[355371 FOD]","[356300 FLV]","(356309)","(356309)","[356309 MCI]","[358176 GGG]","(360226)","[360226 FSM]","[360252 FYV]","(360280)","(360280)","(360280)","[360280 GVW]","[null]","[null]","[null]","(377155)","(377155)","(377155)","[377155 ESF]","[null]","[null]","[null]","(418129)","(418129)","(418129)","[418129 BIX]","[null]","[null]","[null]","(457305)","(457305)","(457305)","[457305 CVG]","[null]","[null]","[null]","(493249)","(493249)","(493249)","[493249 INT]","[null]","[null]","[null]"), heap.listHeap());
        Assertions.assertEquals(74, heap.size());
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("ESF"), 0));
        Assertions.assertEquals("ESF", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("CVG"), 0));
        Assertions.assertEquals("CVG", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("BIX"), 0));
        Assertions.assertEquals("BIX", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("NKX"), 0));
        Assertions.assertEquals("NKX", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("HLN"), 0));
        Assertions.assertEquals("HLN", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("ABQ"), 0));
        Assertions.assertEquals("ABQ", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("DEN"), 0));
        Assertions.assertEquals("DEN", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("PUB"), 0));
        Assertions.assertEquals("PUB", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("HOB"), 0));
        Assertions.assertEquals("HOB", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("DHT"), 0));
        Assertions.assertEquals("DHT", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("LBB"), 0));
        Assertions.assertEquals("LBB", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("DYS"), 0));
        Assertions.assertEquals("DYS", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("LTS"), 0));
        Assertions.assertEquals("LTS", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("HON"), 0));
        Assertions.assertEquals("HON", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("SPS"), 0));
        Assertions.assertEquals("SPS", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("MFE"), 0));
        Assertions.assertEquals("MFE", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("END"), 0));
        Assertions.assertEquals("END", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("IAB"), 0));
        Assertions.assertEquals("IAB", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("HRL"), 0));
        Assertions.assertEquals("HRL", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("INS"), 0));
        Assertions.assertEquals("INS", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("FMN"), 0));
        Assertions.assertEquals("FMN", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("FCS"), 0));
        Assertions.assertEquals("FCS", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("TCC"), 0));
        Assertions.assertEquals("TCC", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("GCK"), 0));
        Assertions.assertEquals("GCK", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("ABI"), 0));
        Assertions.assertEquals("ABI", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("FSI"), 0));
        Assertions.assertEquals("FSI", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("ICT"), 0));
        Assertions.assertEquals("ICT", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("HMN"), 0));
        // The following extract-min generates a quake to level 7
        Assertions.assertEquals("HMN", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertIterableEquals(List.of("{lev: 0 nodeCt: 46}","{lev: 1 nodeCt: 29}","(324468)","[324468 GFK]","[null]","{lev: 2 nodeCt: 18}","(601339)","(601339)","[601339 ACK]","[614409 BGR]","(616444)","[616444 CAR]","[null]","{lev: 3 nodeCt: 11}","{lev: 4 nodeCt: 7}","{lev: 5 nodeCt: 4}","(306907)","(306907)","(306907)","(306907)","(306907)","[306907 COT]","[null]","[null]","[null]","[null]","(326238)","(326238)","(326238)","(326238)","[326238 OKC]","[327126 AUS]","(327317)","[327317 BRO]","[328209 ADM]","(328617)","(328617)","[328617 CRP]","[329151 HLR]","(330148)","[330148 ACT]","[331154 CNW]","(331235)","(331235)","(331235)","[331235 TIK]","[332163 FTW]","(332168)","[332168 DFW]","[333137 CFD]","(333192)","(333192)","[333192 GVT]","[335316 FRI]","(336837)","[336837 PSX]","[337136 CLL]","{lev: 6 nodeCt: 2}","(265146)","(265146)","(265146)","(265146)","(265146)","(265146)","[265146 INK]","[null]","[null]","[null]","[null]","(288485)","(288485)","(288485)","(288485)","[288485 MOT]","[null]","[null]","(316103)","(316103)","[316103 SKF]","[null]","(323151)","[323151 GRK]","[null]","(493249)","(493249)","(493249)","[493249 INT]","[null]","[null]","[null]","(342164)","(342164)","(342164)","(342164)","(342164)","[342164 DAL]","[342336 LNK]","(344100)","[344100 IAH]","[344201 MLC]","(344341)","(344341)","[344341 OFF]","[345137 CXO]","(347238)","[347238 MKO]","[348103 HOU]","(348297)","(348297)","(348297)","[348297 FOE]","[349115 EFD]","(355371)","[355371 FOD]","[356300 FLV]","(356309)","(356309)","[356309 MCI]","[358176 GGG]","(360226)","[360226 FSM]","[360252 FYV]","(360280)","(360280)","(360280)","(360280)","[360280 GVW]","[null]","[null]","[null]","[null]","{lev: 7 nodeCt: 1}","(82277)","(82277)","(82277)","(82277)","(82277)","(82277)","(82277)","[82277 OAK]","[null]","[null]","(89286)","(89286)","[89286 SUU]","[null]","[null]","(119181)","(119181)","(119181)","[119181 LAX]","[null]","[null]","[null]","[null]","[null]","[null]"), heap.listHeap());
        Assertions.assertEquals(46, heap.size());
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("MOT"), 0));
        Assertions.assertEquals("MOT", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("SKF"), 0));
        Assertions.assertEquals("SKF", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("GFK"), 0));
        Assertions.assertEquals("GFK", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("INK"), 0));
        Assertions.assertEquals("INK", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("GRK"), 0));
        Assertions.assertEquals("GRK", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("COT"), 0));
        // The following extract-min generates a quake to level 6
        Assertions.assertEquals("COT", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertIterableEquals(List.of("{lev: 0 nodeCt: 40}","{lev: 1 nodeCt: 23}","{lev: 2 nodeCt: 14}","(601339)","(601339)","[601339 ACK]","[614409 BGR]","(616444)","[616444 CAR]","[null]","{lev: 3 nodeCt: 8}","(493249)","(493249)","(493249)","[493249 INT]","[null]","[null]","[null]","{lev: 4 nodeCt: 4}","(326238)","(326238)","(326238)","(326238)","[326238 OKC]","[327126 AUS]","(327317)","[327317 BRO]","[328209 ADM]","(328617)","(328617)","[328617 CRP]","[329151 HLR]","(330148)","[330148 ACT]","[331154 CNW]","(331235)","(331235)","(331235)","[331235 TIK]","[332163 FTW]","(332168)","[332168 DFW]","[333137 CFD]","(333192)","(333192)","[333192 GVT]","[335316 FRI]","(336837)","[336837 PSX]","[337136 CLL]","{lev: 5 nodeCt: 2}","(342164)","(342164)","(342164)","(342164)","(342164)","[342164 DAL]","[342336 LNK]","(344100)","[344100 IAH]","[344201 MLC]","(344341)","(344341)","[344341 OFF]","[345137 CXO]","(347238)","[347238 MKO]","[348103 HOU]","(348297)","(348297)","(348297)","[348297 FOE]","[349115 EFD]","(355371)","[355371 FOD]","[356300 FLV]","(356309)","(356309)","[356309 MCI]","[358176 GGG]","(360226)","[360226 FSM]","[360252 FYV]","(360280)","(360280)","(360280)","(360280)","[360280 GVW]","[null]","[null]","[null]","[null]","{lev: 6 nodeCt: 1}","(82277)","(82277)","(82277)","(82277)","(82277)","(82277)","[82277 OAK]","[null]","[null]","(89286)","(89286)","[89286 SUU]","[null]","[null]","(119181)","(119181)","(119181)","[119181 LAX]","[null]","[null]","[null]","[null]","[null]"), heap.listHeap());
        Assertions.assertEquals(40, heap.size());
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("AUS"), 0));
        Assertions.assertEquals("AUS", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("ADM"), 0));
        Assertions.assertEquals("ADM", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("HLR"), 0));
        Assertions.assertEquals("HLR", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("CNW"), 0));
        Assertions.assertEquals("CNW", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("FTW"), 0));
        Assertions.assertEquals("FTW", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("CFD"), 0));
        Assertions.assertEquals("CFD", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("FRI"), 0));
        Assertions.assertEquals("FRI", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("CLL"), 0));
        Assertions.assertEquals("CLL", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("LNK"), 0));
        Assertions.assertEquals("LNK", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("MLC"), 0));
        // The following extract-min generates a quake to level 0
        Assertions.assertEquals("MLC", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertIterableEquals(List.of("{lev: 0 nodeCt: 30}","[82277 OAK]","[89286 SUU]","[119181 LAX]","[326238 OKC]","[327317 BRO]","[328617 CRP]","[330148 ACT]","[331235 TIK]","[332168 DFW]","[333192 GVT]","[336837 PSX]","[342164 DAL]","[344100 IAH]","[344341 OFF]","[345137 CXO]","[347238 MKO]","[348103 HOU]","[348297 FOE]","[349115 EFD]","[355371 FOD]","[356300 FLV]","[356309 MCI]","[358176 GGG]","[360226 FSM]","[360252 FYV]","[360280 GVW]","[493249 INT]","[601339 ACK]","[614409 BGR]","[616444 CAR]"), heap.listHeap());
        Assertions.assertEquals(30, heap.size());
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("CXO"), 0));
        Assertions.assertEquals("CXO", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("HOU"), 0));
        Assertions.assertEquals("HOU", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("EFD"), 0));
        Assertions.assertEquals("EFD", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("FLV"), 0));
        Assertions.assertEquals("FLV", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("GGG"), 0));
        Assertions.assertEquals("GGG", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("FYV"), 0));
        Assertions.assertEquals("FYV", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("BRO"), 0));
        Assertions.assertEquals("BRO", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("ACT"), 0));
        Assertions.assertEquals("ACT", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("DFW"), 0));
        Assertions.assertEquals("DFW", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("PSX"), 0));
        Assertions.assertEquals("PSX", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("IAH"), 0));
        Assertions.assertEquals("IAH", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("MKO"), 0));
        Assertions.assertEquals("MKO", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("FOD"), 0));
        Assertions.assertEquals("FOD", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("FSM"), 0));
        // The following extract-min generates a quake to level 1
        Assertions.assertEquals("FSM", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertIterableEquals(List.of("{lev: 0 nodeCt: 16}","{lev: 1 nodeCt: 9}","(82277)","[82277 OAK]","[89286 SUU]","(119181)","[119181 LAX]","[326238 OKC]","(328617)","[328617 CRP]","[616444 CAR]","(331235)","[331235 TIK]","[333192 GVT]","(342164)","[342164 DAL]","[344341 OFF]","(348297)","[348297 FOE]","[null]","(356309)","[356309 MCI]","[null]","(360280)","[360280 GVW]","[493249 INT]","(601339)","[601339 ACK]","[614409 BGR]"), heap.listHeap());
        Assertions.assertEquals(16, heap.size());
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("CRP"), 0));
        Assertions.assertEquals("CRP", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("GVT"), 0));
        Assertions.assertEquals("GVT", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("OFF"), 0));
        Assertions.assertEquals("OFF", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("MCI"), 0));
        Assertions.assertEquals("MCI", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("TIK"), 0));
        Assertions.assertEquals("TIK", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("GVW"), 0));
        Assertions.assertEquals("GVW", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("CAR"), 0));
        Assertions.assertEquals("CAR", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("INT"), 0));
        Assertions.assertEquals("INT", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertDoesNotThrow(() -> heap.decreaseKey(locators.get("DAL"), 0));
        // The following extract-min generates a quake to level 2
        Assertions.assertEquals("DAL", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertIterableEquals(List.of("{lev: 0 nodeCt: 7}","{lev: 1 nodeCt: 4}","(601339)","[601339 ACK]","[614409 BGR]","{lev: 2 nodeCt: 2}","(82277)","(82277)","[82277 OAK]","[89286 SUU]","(119181)","[119181 LAX]","[326238 OKC]","(348297)","(348297)","[348297 FOE]","[null]","[null]"), heap.listHeap());
        Assertions.assertEquals(7, heap.size());
        Assertions.assertEquals("OAK", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertEquals("SUU", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertEquals("LAX", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertEquals("OKC", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertEquals("FOE", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertEquals("ACK", Assertions.assertDoesNotThrow(heap::extractMin));
        Assertions.assertEquals("BGR", Assertions.assertDoesNotThrow(heap::extractMin));
        // The heap is now empty
        Assertions.assertIterableEquals(List.of(), heap.listHeap());
        Assertions.assertEquals(0, heap.size());
        Assertions.assertThrows(EmptyHeapException.class, heap::extractMin);
    }

}
