plugins {
    // fake import these plugins (import but dont activate them)
    id "com.github.spotbugs" version "5.0.6" apply false
    id "com.github.mrsarm.jshell.plugin" version "1.2.0" apply false
}

subprojects {
    // We cant use plugin versions here, which is why we needed to sham import them first
    apply(plugin: 'java-library')
    // Basically a linter. +1 cuz its a UMD CS dept project
    apply(plugin: "com.github.spotbugs")
    // Use `gradle --console plain jshell` INSIDE A PROJECT (not the root) to open a repl with that project's code imported
    apply(plugin: "com.github.mrsarm.jshell.plugin")
    java {
        sourceCompatibility = JavaVersion.VERSION_11
    }

    repositories {
        // Use Maven Central for resolving dependencies.
        mavenCentral()
    }

    dependencies {
        testImplementation(platform("org.junit:junit-bom:5.8.2"))
        testImplementation 'org.junit.jupiter:junit-jupiter-api'
        testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine")
        testRuntimeOnly("org.junit.platform:junit-platform-launcher") {
            because("Only needed to run tests in a version of IntelliJ IDEA that bundles older versions")
        }
    }

    test {
        // `gradle build` : build AND test (build = assemble + test)
        // `gradle test` : test
        // `gradle assemble` : build
        // Use junit 5 for testing.
        useJUnitPlatform()
    }

    task submit(type: Exec) {
        // Automate submission. Install this with `cargo install gradescope-submit`. Requires a rust ðŸ¦€ toolchain
        executable "gradescope-submit"
    }
}